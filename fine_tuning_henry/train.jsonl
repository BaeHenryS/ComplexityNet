{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]", "task_id": 1, "test_setup_code": "", "test_list": ["assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8", "assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12", "assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16"], "challenge_test_list": [], "method2_gpt4_output": "\ndef min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n\n    return dp[m][n]\n", "method2_gpt3_5_output": "\ndef min_cost(cost, m, n):\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m + 1):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def min_cost(cost, m, n):\n    # code here\n    if m == 0 and n == 0:\n        return cost[m][n]\n    if m == 0:\n        return cost[m][n] + min_cost(cost, m, n - 1)\n    if n == 0:\n        return cost[m][n] + min_cost(cost, m - 1, n)\n    return cost[m][n] + min(min_cost(cost, m - 1, n), min_cost(cost, m, n - 1))", "complexity": 2, "data_split": "train"}
{"text": "Write a function to check if the given number is woodball or not.", "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False", "task_id": 20, "test_setup_code": "", "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "challenge_test_list": ["assert is_woodall(32212254719) == True", "assert is_woodall(32212254718) == False", "assert is_woodall(159) == True"], "method2_gpt4_output": "\ndef is_woodall(x):\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        if woodall_number > x:\n            return False\n        n += 1\n", "method2_gpt3_5_output": "\ndef is_woodall(x):\n    result = 1\n    n = 1\n    while result < x:\n        result = n * (n - 1)\n        if result == x:\n            return True\n        n += 1\n    return False\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def is_woodall(x):\n    if x == 0:\n        return False\n    while x > 0:\n        if x % 10!= 0:\n            return False\n        x = x // 10\n    return True", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to count all the substrings starting and ending with same characters.", "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "task_id": 30, "test_setup_code": "", "test_list": ["assert count_Substring_With_Equal_Ends(\"abc\") == 3", "assert count_Substring_With_Equal_Ends(\"abcda\") == 6", "assert count_Substring_With_Equal_Ends(\"ab\") == 2"], "challenge_test_list": [], "method2_gpt4_output": "\ndef check_Equality(s):\n    return count_Substring_With_Equal_Ends(s)\n\ndef count_Substring_With_Equal_Ends(s):\n    n = len(s)\n    result = 0\n    \n    # Count frequencies of each character\n    frequency = [0] * 256\n    \n    for i in range(n):\n        frequency[ord(s[i])] += 1\n    \n    # Compute the final count using the frequency of characters\n    for i in range(256):\n        result += (frequency[i] * (frequency[i] + 1)) // 2\n    \n    return result\n", "method2_gpt3_5_output": "\ndef check_Equality(s): \n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\ndef count_Substring_With_Equal_Ends(s): \n    return check_Equality(s)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def check_Equality(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count", "complexity": 2, "data_split": "train"}
{"text": "Write a function to find the n-th rectangular number.", "code": "def find_rect_num(n):\r\n  return n*(n + 1) ", "task_id": 35, "test_setup_code": "", "test_list": ["assert find_rect_num(4) == 20", "assert find_rect_num(5) == 30", "assert find_rect_num(6) == 42"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_rect_num(n):\n    return n*(n+1)\n", "method2_gpt3_5_output": "\ndef find_rect_num(n):\n    return n * (n + 1) // 2\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "train"}
{"text": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ", "task_id": 36, "test_setup_code": "", "test_list": ["assert find_Nth_Digit(1,2,1) == 5", "assert find_Nth_Digit(3,5,1) == 6", "assert find_Nth_Digit(5,6,5) == 3"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_Nth_Digit(p, q, N):\n    p = p % q\n    for _ in range(N-1):\n        p = (p * 10) % q\n    return (p * 10) // q\n", "method2_gpt3_5_output": "\ndef find_Nth_Digit(p, q, N):\n    result = \"\"\n    remainder_dict = {}\n    remainder = p % q\n    while remainder not in remainder_dict:\n        remainder_dict[remainder] = len(result)\n        p = remainder * 10\n        result += str(p // q)\n        remainder = p % q\n    index = remainder_dict[remainder]\n    if N - 1 < len(result):\n        return int(result[N - 1])\n    else:\n        return int(result[(N - 1 - index) % (len(result) - index)])\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "train"}
{"text": "Write a python function to find the sum of repeated elements in a given array.", "code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])", "task_id": 42, "test_setup_code": "", "test_list": ["assert find_Sum([1,2,3,1,1,4,5,6],8) == 3", "assert find_Sum([1,2,3,1,1],5) == 3", "assert find_Sum([1,1,2],3) == 2"], "challenge_test_list": ["assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18"], "method2_gpt4_output": "\ndef find_Sum(arr, n):\n    repeats = {}\n    for num in arr:\n        if num in repeats:\n            repeats[num] += 1\n        else:\n            repeats[num] = 1\n    \n    sum_repeated = 0\n    for num, count in repeats.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated\n", "method2_gpt3_5_output": "\ndef find_Sum(arr, n):\n    repeated_elements = {}\n    for i in range(n):\n        if arr[i] in repeated_elements:\n            repeated_elements[arr[i]] += arr[i]\n        else:\n            repeated_elements[arr[i]] = arr[i]\n    return sum(repeated_elements.values())\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def find_Sum(arr,n):\n    # code here\n    res = 0\n    for i in range(n):\n        if arr[i] > 0:\n            res += arr[i]\n        else:\n            res -= arr[i]\n    return res", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to find the last digit when factorial of a divides factorial of b.", "code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10", "task_id": 47, "test_setup_code": "", "test_list": ["assert compute_Last_Digit(2,4) == 2", "assert compute_Last_Digit(6,8) == 6", "assert compute_Last_Digit(1,2) == 2"], "challenge_test_list": ["assert compute_Last_Digit(3,7) == 0", "assert compute_Last_Digit(20,23) == 6", "assert compute_Last_Digit(1021,1024) == 4"], "method2_gpt4_output": "\ndef compute_Last_Digit(A, B):\n    # Factorial of A divides factorial of B means B! / A! = (B)*(B-1)*...*(A+1)\n    # Since we only need the last digit, we can simplify the calculation by modulo 10\n    if A == B or B < A:\n        return 1  # Since the division would be 1 or undefined (B<A), the last digit would be equal to 1\n    last_digit = 1\n    for i in range(A + 1, B + 1):\n        last_digit = (last_digit * i) % 10\n        if last_digit == 0:\n            break\n    return last_digit\n\n# Usage:\n# last_digit = compute_Last_Digit(5, 10) # This would give the last digit of factorial 10 divided by factorial 5\n", "method2_gpt3_5_output": "\ndef compute_Last_Digit(A, B):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n        \n    def last_digit(num):\n        return num % 10\n    \n    result = min(A, B)\n    last_A = last_digit(factorial(A))\n    last_B = last_digit(factorial(B))\n    \n    if A == B:\n        return last_A\n    else:\n        return last_digit(factorial(result))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "train"}
{"text": "Write a function to sort a list of tuples using lambda.", "code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks", "task_id": 64, "test_setup_code": "", "test_list": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], "challenge_test_list": [], "method2_gpt4_output": "\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n", "method2_gpt3_5_output": "\ndef subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def subject_marks(subjectmarks):\n    return subjectmarks[1]", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to count the number of squares in a rectangle.", "code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "task_id": 76, "test_setup_code": "", "test_list": ["assert count_Squares(4,3) == 20", "assert count_Squares(2,2) == 5", "assert count_Squares(1,1) == 1"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_Squares(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        count += (m - i + 1) * (n - i + 1)\n    return count\n", "method2_gpt3_5_output": "\ndef count_Squares(m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif m == n:\n        return m * n\n    else:\n        return (m * n) + ((m - 1) * (n - 1))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def count_Squares(m,n):\n    if m==0 or n==0:\n        return 0\n    if m==1 or n==1:\n        return 1\n    if m==2 or n==2:\n        return 4\n    return 4+count_Squares(m-1,n)+count_Squares(m,n-1)-count_Squares(m-1,n-1)", "complexity": 2, "data_split": "train"}
{"text": "Write a function to check if a substring is present in a given list of string values.", "code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False", "task_id": 91, "test_setup_code": "", "test_list": ["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_substring(str1, sub_str):\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n", "method2_gpt3_5_output": "\ndef find_substring(str1, sub_str):\n    return [s for s in str1 if sub_str in s]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def find_substring(str1, sub_str):\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False", "complexity": 2, "data_split": "train"}
{"text": "Write a function to find the next smallest palindrome of a specified number.", "code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i", "task_id": 100, "test_setup_code": "", "test_list": ["assert next_smallest_palindrome(99)==101", "assert next_smallest_palindrome(1221)==1331", "assert next_smallest_palindrome(120)==121"], "challenge_test_list": [], "method2_gpt4_output": "\ndef next_smallest_palindrome(num):\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n", "method2_gpt3_5_output": "\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def next_smallest_palindrome(num):\n    # Convert the number to a string\n    num = str(num)\n    # Reverse the number\n    rev = num[::-1]\n    # If the number is a palindrome, return the number\n    if num == rev:\n        return num\n    # If the number is not a palindrome, find the next smallest palindrome\n    while True:\n        # Add 1 to the number\n        num = int(num) + 1\n        # Convert the number to a string\n        num = str(num)\n        # Reverse the number\n        rev = num[::-1]\n        # If the number is a palindrome, return the number\n        if num == rev:\n            return num", "complexity": 2, "data_split": "train"}
{"text": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "code": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r", "task_id": 104, "test_setup_code": "", "test_list": ["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sort_sublists(input_list):\n    return [sorted(sublist, key=lambda x: x) for sublist in input_list]\n", "method2_gpt3_5_output": "\ndef sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort(key=lambda x: x)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort(key=lambda x: x.lower())\n    return input_list", "complexity": 2, "data_split": "train"}
{"text": "Write a function to add the given list to the given tuples.", "code": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ", "task_id": 106, "test_setup_code": "", "test_list": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)", "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"], "challenge_test_list": [], "method2_gpt4_output": "\ndef add_lists(test_list, test_tup):\n    # Unpack the tuple and convert to list, then concatenate with the given list\n    result = list(test_tup) + test_list\n    # Convert the result to tuple before returning\n    return tuple(result)\n", "method2_gpt3_5_output": "\ndef add_lists(test_list, test_tup):\n    result = []\n    for tup in test_tup:\n        result.append(list(tup) + test_list)\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def add_lists(test_list, test_tup):\n    # Write your code here.\n    return test_tup + (test_list,)", "complexity": 2, "data_split": "train"}
{"text": "Write a function to count the same pair in three given lists.", "code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result", "task_id": 142, "test_setup_code": "", "test_list": ["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4", "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_samepair(list1, list2, list3):\n    return sum(1 for a, b, c in zip(list1, list2, list3) if a == b == c)\n", "method2_gpt3_5_output": "\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            count += 1\n    return count\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to toggle all even bits of a given number.", "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "task_id": 155, "test_setup_code": "", "test_list": ["assert even_bit_toggle_number(10) == 0", "assert even_bit_toggle_number(20) == 30", "assert even_bit_toggle_number(30) == 20"], "challenge_test_list": [], "method2_gpt4_output": "\ndef even_bit_toggle_number(n):\n    # Calculate the binary length of the number\n    binary_length = n.bit_length()\n    \n    # Prepare a mask with all even bits set\n    even_bit_mask = 0b0\n    for i in range(1, binary_length, 2):\n        even_bit_mask |= 1 << i\n    \n    # Toggle even bits using the XOR operation\n    return n ^ even_bit_mask\n", "method2_gpt3_5_output": "\ndef even_bit_toggle_number(n):\n    return int(''.join(['1' if x == '0' else '0' for x in '{:b}'.format(n)]), 2)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def even_bit_toggle_number(n) :\n    return (n & 0xAAAAAAAA) | (n & 0x55555555)", "complexity": 2, "data_split": "train"}
{"text": "Write a function to find the focus of a parabola.", "code": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus", "task_id": 185, "test_setup_code": "", "test_list": ["assert parabola_focus(5,3,2)==(-0.3, 1.6)", "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)", "assert parabola_focus(2,4,6)==(-1.0, 4.125)"], "challenge_test_list": [], "method2_gpt4_output": "\ndef parabola_focus(a, b, c):\n    # vertex form of parabola equation is y = a(x-h)^2 + k\n    # where (h, k) is the vertex of the parabola\n    # focus point (h, k + 1/(4a)), where a is the coefficient in the standard form\n    \n    # compute h and k, the coordinates of the vertex\n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    \n    # compute the focus of the parabola using the vertex coordinates\n    focus_x = h\n    focus_y = k + 1 / (4 * a)\n    return focus_x, focus_y\n", "method2_gpt3_5_output": "\ndef parabola_focus(a, b, c):\n    return (b / (2 * a), (4 * a * c - b ** 2) / (4 * a))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "train"}
{"text": "Write a function to perform the exponentiation of the given two tuples.", "code": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n", "task_id": 197, "test_setup_code": "", "test_list": ["assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)", "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)", "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_exponentio(test_tup1, test_tup2):\n    return tuple(map(pow, test_tup1, test_tup2))\n", "method2_gpt3_5_output": "\ndef find_exponentio(test_tup1, test_tup2):\n    result_tup = (test_tup1[0] ** test_tup2[0], test_tup1[1] ** test_tup2[1])\n    return result_tup\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def find_exponentio(test_tup1, test_tup2):\n    # Write your code here.\n    return tuple(map(lambda x: x**test_tup2[0], test_tup1))", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to find the hamming distance between given two integers.", "code": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ", "task_id": 203, "test_setup_code": "", "test_list": ["assert hamming_Distance(4,8) == 2", "assert hamming_Distance(2,4) == 2", "assert hamming_Distance(1,2) == 2"], "challenge_test_list": [], "method2_gpt4_output": "\ndef hamming_Distance(n1, n2):\n    xor_result = n1 ^ n2\n    return bin(xor_result).count('1')\n", "method2_gpt3_5_output": "\ndef hamming_distance(n1, n2):\n    x = n1 ^ n2\n    distance = 0\n    while x:\n        distance += 1\n        x &= x - 1\n    return distance\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def hamming_Distance(n1,n2) :\n    n1,n2 = bin(n1)[2:],bin(n2)[2:]\n    return len(n1) - len(n2) + len([i for i in zip(n1,n2) if i[0]!= i[1]])", "complexity": 2, "data_split": "train"}
{"text": "Write a function to convert radians to degrees.", "code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree", "task_id": 214, "test_setup_code": "", "test_list": ["assert degree_radian(90)==5156.620156177409", "assert degree_radian(60)==3437.746770784939", "assert degree_radian(120)==6875.493541569878"], "challenge_test_list": [], "method2_gpt4_output": "\ndef degree_radian(radian):\n    # This conversion uses the factor 180/pi to convert radians to degrees\n    degrees = radian * (180.0 / 3.141592653589793)\n    return degrees\n", "method2_gpt3_5_output": "\ndef degree_radian(radian):\n    import math\n    degree = radian * 180 / math.pi\n    return degree\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def degree_radian(radian):\n    degree = radian * 180 / math.pi\n    return degree", "complexity": 2, "data_split": "train"}
{"text": "Write a function to replace the last element of the list with another list.", "code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n", "task_id": 240, "test_setup_code": "", "test_list": ["assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]", "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef replace_list(list1, list2):\n    if list1:\n        list1[-1:] = list2\n    else:\n        list1.extend(list2)\n    return list1\n", "method2_gpt3_5_output": "\ndef replace_list(list1, list2):\n    list1[-1:] = list2\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def replace_list(list1,list2):\n    list1[-1]=list2\n    return list1", "complexity": 2, "data_split": "train"}
{"text": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "code": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum", "task_id": 245, "test_setup_code": "", "test_list": ["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194", "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210", "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"], "challenge_test_list": [], "method2_gpt4_output": "\ndef max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    max_sum_bi = 0\n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    for i in range(n):\n        max_sum_bi = max(max_sum_bi, inc[i] + dec[i] - arr[i])\n\n    return max_sum_bi\n", "method2_gpt3_5_output": "\ndef max_sum(arr, n):\n    def lis(arr, n): \n        lis = [arr[i] for i in range(n)] \n        for i in range(1, n): \n            for j in range(0, i): \n                if arr[i] > arr[j] and lis[i] < lis[j] + arr[i]: \n                    lis[i] = lis[j] + arr[i] \n        return max(lis)\n    inc = lis(arr, n) \n    arr.reverse() \n    dec = lis(arr, n) \n    return inc + dec - arr[0]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "train"}
{"text": "Write a function for computing square roots using the babylonian method.", "code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;", "task_id": 246, "test_setup_code": "", "test_list": ["assert babylonian_squareroot(10)==3.162277660168379", "assert babylonian_squareroot(2)==1.414213562373095", "assert babylonian_squareroot(9)==3.0"], "challenge_test_list": [], "method2_gpt4_output": "\ndef babylonian_squareroot(number):\n    if number < 0:\n        return None\n    if number == 0:\n        return 0\n    x = number\n    y = (x + 1) / 2\n    while y < x:\n        x = y\n        y = (x + number / x) / 2\n    return x\n", "method2_gpt3_5_output": "\ndef babylonian_squareroot(number):\n    guess = number / 2.0\n    while abs(guess*guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2.0\n    return guess\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def babylonian_squareroot(number):\n    \"\"\"\n    Calculates the square root of a number using the Babylonian method.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Cannot calculate square root of negative number.\")\n    elif number == 0:\n        return 0\n    else:\n        guess = number\n        i = 0\n        while guess*guess!= number:\n            i += 1\n            guess = (guess + number / guess) / 2.0\n        return guess", "complexity": 2, "data_split": "train"}
{"text": "Write a function to find the nth newman–shanks–williams prime number.", "code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "task_id": 260, "test_setup_code": "", "test_list": ["assert newman_prime(3) == 7 ", "assert newman_prime(4) == 17", "assert newman_prime(5) == 41"], "challenge_test_list": [], "method2_gpt4_output": "\ndef newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        def NS(n):\n            if n == 0:\n                return 1\n            elif n == 1:\n                return 1\n            else:\n                return 2 * NS(n - 1) + NS(n - 2)\n        # Start from index 1 because 1st NSW number is at index 0\n        i, count = 1, 1\n        while True:\n            newman_num = NS(i)\n            if all(newman_num % p != 0 for p in range(2, int(newman_num ** 0.5) + 1)):\n                if count == n:\n                    return newman_num\n                count += 1\n            i += 1\n\n# Example usage:\n# nth_newman_prime = newman_prime(5)\n# print(nth_newman_prime)\n", "method2_gpt3_5_output": "\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    def is_nsw_number(x):\n        if x == 0 or x == 1:\n            return x\n        return 2 * is_nsw_number(x - 1) + is_nsw_number(x - 2)\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        candidate = is_nsw_number(num)\n        if is_prime(candidate):\n            count += 1\n    return candidate\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "train"}
{"text": "Write a python function to find the sum of even numbers at even positions.", "code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum", "task_id": 270, "test_setup_code": "", "test_list": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30", "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26", "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sum_even_and_even_index(arr, n):\n    return sum(arr[i] for i in range(0, n, 2) if arr[i] % 2 == 0)\n", "method2_gpt3_5_output": "\ndef sum_even_and_even_index(arr, n):\n    total_sum = 0\n    for i in range(1, n, 2):\n        if arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def sum_even_and_even_index(arr,n):\n    sum_even = 0\n    sum_even_index = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum_even += arr[i]\n        if arr[i]%2 == 0:\n            sum_even_index += arr[i]\n    return sum_even,sum_even_index", "complexity": 2, "data_split": "train"}
{"text": "Write a function that matches a string that has an a followed by two to three 'b'.", "code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 285, "test_setup_code": "", "test_list": ["assert text_match_two_three(\"ac\")==('Not matched!')", "assert text_match_two_three(\"dc\")==('Not matched!')", "assert text_match_two_three(\"abbbba\")==('Found a match!')"], "challenge_test_list": [], "method2_gpt4_output": "\nimport re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n", "method2_gpt3_5_output": "\nimport re\n\ndef text_match_two_three(text):\n    return bool(re.search(r'ab{2,3}', text))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def text_match_two_three(text):\n    pattern = re.compile(r'a[b]{2,3}')\n    return pattern.search(text)", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to count the number of squares in a rectangle.", "code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6", "task_id": 347, "test_setup_code": "", "test_list": ["assert count_Squares(4,3) == 20", "assert count_Squares(1,2) == 2", "assert count_Squares(2,2) == 5"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_Squares(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        count += (m - i + 1) * (n - i + 1)\n    return count\n", "method2_gpt3_5_output": "\ndef count_Squares(m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif m == n:\n        return m * m\n    else:\n        return m * n + count_Squares(min(m, n), abs(m - n))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def count_Squares(m,n):\n    return (m+1)*(n+1)", "complexity": 2, "data_split": "train"}
{"text": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "code": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 401, "test_setup_code": "", "test_list": ["assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], "challenge_test_list": [], "method2_gpt4_output": "\ndef add_nested_tuples(test_tup1, test_tup2):\n    result = tuple(tuple(a + b for a, b in zip(sub_tup1, sub_tup2)) for sub_tup1, sub_tup2 in zip(test_tup1, test_tup2))\n    return result\n", "method2_gpt3_5_output": "\ndef add_nested_tuples(test_tup1, test_tup2):\n    result = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def add_nested_tuples(test_tup1, test_tup2):\n    return tuple(map(sum, zip(test_tup1, test_tup2)))", "complexity": 2, "data_split": "train"}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs", "task_id": 408, "test_setup_code": "", "test_list": ["assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]", "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"], "challenge_test_list": [], "method2_gpt4_output": "\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    min_heap = []\n    # Initialize the heap with the smallest pairs (i.e., first pair of second array with each element of first array)\n    for i in range(min(k, len(nums1))):  \n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n\n    result = []\n    while k > 0 and min_heap:\n        sum, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n        \n    return result\n", "method2_gpt3_5_output": "\nimport itertools\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = list(itertools.product(nums1, nums2))\n    pairs.sort(key=lambda x: sum(x))\n    return pairs[:k]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "train"}
{"text": "Write a function to find the minimum value in a given heterogeneous list.", "code": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val", "task_id": 410, "test_setup_code": "", "test_list": ["assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "assert min_val(['Python', 15, 20, 25])==15", "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"], "challenge_test_list": [], "method2_gpt4_output": "\ndef min_val(listval):\n    numeric_vals = [val for val in listval if isinstance(val, (int, float))]\n    return min(numeric_vals)\n", "method2_gpt3_5_output": "\ndef min_val(listval):\n    min_value = None\n    for item in listval:\n        if min_value is None or item < min_value:\n            min_value = item\n    return min_value\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def min_val(listval):\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to find the sublist having maximum length.", "code": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList", "task_id": 418, "test_setup_code": "", "test_list": ["assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]", "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef Find_Max(lst):\n    max_len = 0\n    max_sublist = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n                max_sublist = sublist\n    return max_sublist\n", "method2_gpt3_5_output": "\ndef Find_Max(lst):\n    max_length = 0\n    max_sublist = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n                max_sublist = lst[i:j+1]\n    return max_sublist\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def Find_Max(lst):\n    max_len = 0\n    max_len_start = 0\n    max_len_end = 0\n    for i in range(len(lst)):\n        current_len = 1\n        for j in range(i+1, len(lst)):\n            if lst[j] == lst[i]:\n                current_len += 1\n            else:\n                break\n        if current_len > max_len:\n            max_len = current_len\n            max_len_start = i\n            max_len_end = i + current_len - 1\n    return lst[max_len_start:max_len_end+1]", "complexity": 2, "data_split": "train"}
{"text": "Write a function to extract the elementwise and tuples from the given two tuples.", "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 429, "test_setup_code": "", "test_list": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)", "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"], "challenge_test_list": [], "method2_gpt4_output": "\ndef and_tuples(test_tup1, test_tup2):\n    res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "method2_gpt3_5_output": "\ndef and_tuples(test_tup1, test_tup2):\n    res = tuple(x for x in test_tup1 if x in test_tup2)\n    return res\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def and_tuples(test_tup1, test_tup2):\n    # Initialize an empty list to store the elements of the tuples\n    tup_list = []\n    # Iterate through the first tuple\n    for i in test_tup1:\n        # Iterate through the second tuple\n        for j in test_tup2:\n            # If the elements of the first tuple are equal to the elements of the second tuple\n            if i == j:\n                # Append the element to the list\n                tup_list.append(i)\n    # Return the list\n    return tup_list", "complexity": 2, "data_split": "train"}
{"text": "Write a function that matches a string that has an a followed by one or more b's.", "code": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n", "task_id": 434, "test_setup_code": "", "test_list": ["assert text_match_one(\"ac\")==('Not matched!')", "assert text_match_one(\"dc\")==('Not matched!')", "assert text_match_one(\"abba\")==('Found a match!')"], "challenge_test_list": [], "method2_gpt4_output": "\nimport re\n\ndef text_match_one(text):\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\n# print(text_match_one('abc'))\n# print(text_match_one('abbc'))\n# print(text_match_one('ac'))\n", "method2_gpt3_5_output": "\nimport re\n\ndef text_match_one(text):\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'No match found!'\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def text_match_one(text):\n    return re.search(r'a.*b', text)", "complexity": 2, "data_split": "train"}
{"text": "Write a function to extract specified size of strings from a give list of string values.", "code": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result", "task_id": 450, "test_setup_code": "", "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"], "challenge_test_list": [], "method2_gpt4_output": "\ndef extract_string(str_list, l):\n    return [s for s in str_list if len(s) == l]\n", "method2_gpt3_5_output": "\ndef extract_string(str_list, size):\n    return [s[:size] for s in str_list]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    if (x1-x2)**2 + (y1-y2)**2 < (x1-x3)**2 + (y1-y3)**2:\n        if (x2-x3)**2 + (y2-y3)**2 < (x1-x3)**2 + (y1-y3)**2:\n            return True\n        else:\n            return False\n    else:\n        return False", "complexity": 2, "data_split": "train"}
{"text": "Write a function that matches a word containing 'z'.", "code": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 454, "test_setup_code": "", "test_list": ["assert text_match_wordz(\"pythonz.\")==('Found a match!')", "assert text_match_wordz(\"xyz.\")==('Found a match!')", "assert text_match_wordz(\"  lang  .\")==('Not matched!')"], "challenge_test_list": [], "method2_gpt4_output": "\nimport re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "method2_gpt3_5_output": "\nimport re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def sumofFactors(n) :\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                sum = sum + i\n    return sum", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to convert decimal number to octal number.", "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)", "task_id": 467, "test_setup_code": "", "test_list": ["assert decimal_to_Octal(10) == 12", "assert decimal_to_Octal(2) == 2", "assert decimal_to_Octal(33) == 41"], "challenge_test_list": [], "method2_gpt4_output": "\ndef decimal_to_Octal(deciNum):\n    octalNum = 0\n    countval = 1\n    dNo = deciNum\n    \n    while deciNum != 0:\n        remainder = deciNum % 8\n        octalNum += remainder * countval\n        countval = countval * 10\n        deciNum //= 8\n    \n    return octalNum\n", "method2_gpt3_5_output": "\ndef decimal_to_Octal(deciNum):\n    octalNum = oct(deciNum)\n    return octalNum\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def find_peak_util(arr, low, high, n):\n    if high >= low:\n        mid = (high + low) // 2\n        if (mid == 0 or arr[mid] > arr[mid - 1]) and (mid == n - 1 or arr[mid] > arr[mid + 1]):\n            return arr[mid]\n        if arr[mid] < arr[mid + 1]:\n            return find_peak_util(arr, (mid + 1), high, n)\n        else:\n            return find_peak_util(arr, low, (mid - 1), n)\n    return -1", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to find minimum sum of factors of a given number.", "code": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum", "task_id": 511, "test_setup_code": "", "test_list": ["assert find_Min_Sum(12) == 7", "assert find_Min_Sum(105) == 15", "assert find_Min_Sum(2) == 2"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_Min_Sum(num):\n    if num < 2:\n        return num\n    \n    sum_factors = 0\n    i = 2\n    while i * i <= num:\n        while num % i == 0:\n            sum_factors += i\n            num //= i\n        i += 1\n    if num > 1:\n        sum_factors += num\n    return sum_factors\n", "method2_gpt3_5_output": "\ndef find_Min_Sum(num):\n    result = 0\n    for i in range(2, int(num**0.5) + 1):\n        while num % i == 0:\n            result += i\n            num //= i\n    if num > 1:\n        result += num\n    return result + 1\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "train"}
{"text": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.", "code": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum", "task_id": 547, "test_setup_code": "", "test_list": ["assert Total_Hamming_Distance(4) == 7", "assert Total_Hamming_Distance(2) == 3", "assert Total_Hamming_Distance(5) == 8"], "challenge_test_list": [], "method2_gpt4_output": "\ndef Total_Hamming_Distance(n):\n    total_dist = 0\n    for x in range(n):\n        x_bin = bin(x)[2:]\n        y_bin = bin(x+1)[2:]\n        max_len = max(len(x_bin), len(y_bin))\n        x_bin = x_bin.zfill(max_len)\n        y_bin = y_bin.zfill(max_len)\n        total_dist += sum(el1 != el2 for el1, el2 in zip(x_bin, y_bin))\n    return total_dist\n", "method2_gpt3_5_output": "\ndef Total_Hamming_Distance(n):\n    total_distance = 0\n    for i in range(32):\n        count_ones = 0\n        for num in range(n):\n            count_ones += (num >> i) & 1\n        total_distance += count_ones * (n - count_ones)\n    return total_distance\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def last_occurence_char(string,char):\n    last_index = -1\n    for i in range(len(string)):\n        if string[i] == char:\n            last_index = i\n    return last_index", "complexity": 2, "data_split": "train"}
{"text": "Write a function to convert the given tuple to a floating-point number.", "code": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) ", "task_id": 553, "test_setup_code": "", "test_list": ["assert tuple_to_float((4, 56)) == 4.56", "assert tuple_to_float((7, 256)) == 7.256", "assert tuple_to_float((8, 123)) == 8.123"], "challenge_test_list": [], "method2_gpt4_output": "\ndef tuple_to_float(test_tup):\n    return float('.'.join(map(str, test_tup)))\n", "method2_gpt3_5_output": "\ndef tuple_to_float(test_tup):\n    result = float(''.join(map(str, test_tup)))\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def Seq_Linear(seq_nums):\n    for i in range(len(seq_nums)-1):\n        if seq_nums[i+1]-seq_nums[i]!= 1:\n            return False\n    return True", "complexity": 2, "data_split": "train"}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "code": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]", "task_id": 571, "test_setup_code": "", "test_list": ["assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62", "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25", "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"], "challenge_test_list": [], "method2_gpt4_output": "\ndef max_sum_pair_diff_lessthan_K(arr, N, K):\n    # Sort the array \n    arr.sort() \n    # Initialize result \n    result = 0\n\n    # Traverse the array from last \n    i = N - 1\n    while i > 0: \n        # If the difference between the current pair is less than K \n        if arr[i] - arr[i-1] < K: \n            # Update the result by current pair sum \n            result += arr[i] + arr[i-1] \n            # Jump to the next pair \n            i -= 2\n        else:\n            # If the current pair is not valid move to the next \n            i -= 1\n    return result\n", "method2_gpt3_5_output": "\ndef max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    maxSum = 0\n    for i in range(0, N - 1, 2):\n        if arr[i + 1] - arr[i] < K:\n            maxSum += arr[i] + arr[i + 1]\n    return maxSum\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def remove_words(list1, charlist):\n    for i in range(len(list1)):\n        for j in range(len(charlist)):\n            list1[i] = list1[i].replace(charlist[j], \"\")\n    return list1", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to find nth number in a sequence which is not a multiple of a given number.", "code": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) ", "task_id": 575, "test_setup_code": "", "test_list": ["assert count_no(2,3,1,10) == 5", "assert count_no(3,6,4,20) == 11", "assert count_no(5,10,4,20) == 16"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_no(A, N, L, R):\n    count = 0\n    for number in range(L, R + 1):\n        if number % A != 0:\n            count += 1\n            if count == N:\n                return number\n    return -1  # In case the Nth non-multiple is not found in the given range\n", "method2_gpt3_5_output": "\ndef count_no(A, N, L, R):\n    count = 0\n    num = 1\n    while True:\n        if num % A != 0:\n            count += 1\n            if count == N:\n                return num\n        num += 1\n        if num > R:\n            break\n    return -1\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def surfacearea_cylinder(r,h):\n    return 2*3.14*r*h + 2*3.14*r*r", "complexity": 2, "data_split": "train"}
{"text": "Write a python function to identify non-prime numbers.", "code": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result", "task_id": 3, "test_setup_code": "", "test_list": ["assert is_not_prime(2) == False", "assert is_not_prime(10) == True", "assert is_not_prime(35) == True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n", "method2_gpt3_5_output": "\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def is_not_prime(n):\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False", "complexity": 0, "data_split": "train"}
{"text": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "code": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "task_id": 7, "test_setup_code": "", "test_list": ["assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']", "assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']", "assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']"], "challenge_test_list": [], "method2_gpt4_output": "\nimport re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)\n", "method2_gpt3_5_output": "\nimport re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "complexity": 0, "data_split": "train"}
{"text": "Write a function to find squares of individual elements in a list using lambda function.", "code": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums", "task_id": 8, "test_setup_code": "", "test_list": ["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert square_nums([10,20,30])==([100,400,900])", "assert square_nums([12,15])==([144,225])"], "challenge_test_list": [], "method2_gpt4_output": "\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))\n", "method2_gpt3_5_output": "\ndef square_nums(nums):\n    squared_nums = list(map(lambda x: x**2, nums))\n    return squared_nums\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def square_nums(nums):\n    return list(map(lambda x: x**2, nums))", "complexity": 0, "data_split": "train"}
{"text": "Write a function to get the n smallest items from a dataset.", "code": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest", "task_id": 10, "test_setup_code": "", "test_list": ["assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]", "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]", "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef small_nnum(list1, n):\n    return sorted(list1)[:n]\n", "method2_gpt3_5_output": "\ndef small_nnum(list1, n):\n    return sorted(list1)[:n]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def small_nnum(list1,n):\n    list1.sort()\n    return list1[:n]", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to remove first and last occurrence of a given character from the string.", "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ", "task_id": 11, "test_setup_code": "", "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "challenge_test_list": ["assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"", "assert remove_Occ(\"\",\"l\") == \"\""], "method2_gpt4_output": "\ndef remove_Occ(s, ch):\n    first_occ = s.find(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    \n    last_occ = s.rfind(ch)\n    if last_occ != -1:\n        s = s[:last_occ] + s[last_occ+1:]\n\n    return s\n", "method2_gpt3_5_output": "\ndef remove_Occ(s, ch):\n    first_occ = s.find(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    last_occ = s.rfind(ch)\n    if last_occ != -1:\n        s = s[:last_occ] + s[last_occ+1:]\n    return s\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def remove_Occ(s,ch):\n    s=s.split(ch)\n    s=\"\".join(s)\n    return s", "complexity": 0, "data_split": "train"}
{"text": "Write a function to find the perimeter of a square.", "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "task_id": 17, "test_setup_code": "", "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "challenge_test_list": [], "method2_gpt4_output": "\ndef square_perimeter(a):\n    return 4 * a\n", "method2_gpt3_5_output": "\ndef square_perimeter(a):\n    return 4 * a\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def square_perimeter(a):\n    return 4 * a", "complexity": 0, "data_split": "train"}
{"text": "Write a function to find whether a given array of integers contains any duplicate element.", "code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ", "task_id": 19, "test_setup_code": "", "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))\n", "method2_gpt3_5_output": "\ndef test_duplicate(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def test_duplicate(arraynums):\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to find the product of non-repeated elements in a given array.", "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ", "task_id": 25, "test_setup_code": "", "test_list": ["assert find_Product([1,1,2,3],4) == 6", "assert find_Product([1,2,3,1,1],5) == 6", "assert find_Product([1,1,4,5,6],5) == 120"], "challenge_test_list": ["assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520"], "method2_gpt4_output": "\ndef find_Product(arr, n):\n    unique_elements = set()\n    repeated_elements = set()\n\n    for element in arr:\n        if element in unique_elements:\n            repeated_elements.add(element)\n        else:\n            unique_elements.add(element)\n\n    product = 1\n    for element in unique_elements:\n        if element not in repeated_elements:\n            product *= element\n\n    return product\n", "method2_gpt3_5_output": "\ndef find_Product(arr, n):\n    result = 1\n    for i in range(n):\n        repeated = False\n        for j in range(n):\n            if i != j and arr[i] == arr[j]:\n                repeated = True\n                break\n        if not repeated:\n            result *= arr[i]\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def find_Product(arr,n):\n    # code here\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to remove all digits from a list of strings.", "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list", "task_id": 27, "test_setup_code": "", "test_list": ["assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']", "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']", "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"], "challenge_test_list": [], "method2_gpt4_output": "\ndef remove(list):\n    return [''.join(filter(lambda x: not x.isdigit(), string)) for string in list]\n", "method2_gpt3_5_output": "\ndef remove(input_list):\n    return [\"\".join([char for char in string if not char.isdigit()]) for string in input_list]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def remove(list):\n    for i in range(len(list)):\n        list[i] = list[i].replace('0','')\n        list[i] = list[i].replace('1','')\n        list[i] = list[i].replace('2','')\n        list[i] = list[i].replace('3','')\n        list[i] = list[i].replace('4','')\n        list[i] = list[i].replace('5','')\n        list[i] = list[i].replace('6','')\n        list[i] = list[i].replace('7','')\n        list[i] = list[i].replace('8','')\n        list[i] = list[i].replace('9','')\n    return list", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to find the element occurring odd number of times.", "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1", "task_id": 29, "test_setup_code": "", "test_list": ["assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1", "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3", "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"], "challenge_test_list": [], "method2_gpt4_output": "\ndef get_Odd_Occurrence(arr, arr_size):\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if (count % 2 != 0):\n            return arr[i]\n    return None\n", "method2_gpt3_5_output": "\ndef get_Odd_Occurrence(arr, arr_size):\n    result = 0\n    for i in range(arr_size):\n        result = result ^ arr[i]\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def get_Odd_Occurrence(arr,arr_size):\n    # Initialize result\n    result = 0\n    # Traverse the array\n    for i in range(0, arr_size):\n        # Add current element of array to previous result\n        result = result ^ arr[i]\n    return result", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to find the largest prime factor of a given number.", "code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)", "task_id": 32, "test_setup_code": "", "test_list": ["assert max_Prime_Factors(15) == 5", "assert max_Prime_Factors(6) == 3", "assert max_Prime_Factors(2) == 2"], "challenge_test_list": [], "method2_gpt4_output": "\ndef max_Prime_Factors(n):\n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # Continue to divide n by the next odd numbers to remove any factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n", "method2_gpt3_5_output": "\ndef max_Prime_Factors(n):\n    factor = 2\n    while factor * factor <= n:\n        if n % factor:\n            factor += 1\n        else:\n            n //= factor\n    return n\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def max_Prime_Factors (n):\n    max_prime = 0\n    while n % 2 == 0:\n        max_prime = 2\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n    if n > 2:\n        max_prime = n\n    return max_prime", "complexity": 0, "data_split": "train"}
{"text": "Write a function to filter even numbers using lambda function.", "code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums", "task_id": 41, "test_setup_code": "", "test_list": ["assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]", "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]", "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n", "method2_gpt3_5_output": "\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to determine whether all the numbers are different from each other are not.", "code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;", "task_id": 46, "test_setup_code": "", "test_list": ["assert test_distinct([1,5,7,9]) == True", "assert test_distinct([2,4,5,5,7,9]) == False", "assert test_distinct([1,2,3]) == True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n", "method2_gpt3_5_output": "\ndef test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def test_distinct(data):\n    for i in range(len(data)):\n        for j in range(i+1,len(data)):\n            if data[i] == data[j]:\n                return False\n    return True", "complexity": 0, "data_split": "train"}
{"text": "Write a function to caluclate area of a parallelogram.", "code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area", "task_id": 52, "test_setup_code": "", "test_list": ["assert parallelogram_area(10,20)==200", "assert parallelogram_area(15,20)==300", "assert parallelogram_area(8,9)==72"], "challenge_test_list": [], "method2_gpt4_output": "\ndef parallelogram_area(b, h):\n    return b * h\n", "method2_gpt3_5_output": "\ndef parallelogram_area(b, h):\n    return b * h\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def parallelogram_area(b,h):\n    return b*h", "complexity": 0, "data_split": "train"}
{"text": "Write a function to find t-nth term of geometric series.", "code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn", "task_id": 55, "test_setup_code": "", "test_list": ["assert tn_gp(1,5,2)==16", "assert tn_gp(1,5,4)==256", "assert tn_gp(2,6,3)==486"], "challenge_test_list": [], "method2_gpt4_output": "\ndef tn_gp(a, n, r):\n    return a * (r ** (n - 1))\n", "method2_gpt3_5_output": "\ndef tn_gp(a, n, r):\n    return a * (r ** (n - 1))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def tn_gp(a,n,r):\n    return a*(r**(n-1))", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to check whether the given two integers have opposite sign or not.", "code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ", "task_id": 58, "test_setup_code": "", "test_list": ["assert opposite_Signs(1,-2) == True", "assert opposite_Signs(3,2) == False", "assert opposite_Signs(-10,-10) == False"], "challenge_test_list": [], "method2_gpt4_output": "\ndef opposite_Signs(x, y):\n    return (x ^ y) < 0\n", "method2_gpt3_5_output": "\ndef opposite_Signs(x, y):\n    return (x ^ y) < 0\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def opposite_Signs(x,y):\n    if x*y<0:\n        return True\n    else:\n        return False", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to find smallest number in a list.", "code": "def smallest_num(xs):\n  return min(xs)\n", "task_id": 62, "test_setup_code": "", "test_list": ["assert smallest_num([10, 20, 1, 45, 99]) == 1", "assert smallest_num([1, 2, 3]) == 1", "assert smallest_num([45, 46, 50, 60]) == 45"], "challenge_test_list": [], "method2_gpt4_output": "\ndef smallest_num(xs):\n    return min(xs)\n", "method2_gpt3_5_output": "\ndef smallest_num(xs):\n    return min(xs)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def smallest_num(xs):\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to count positive numbers in a list.", "code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ", "task_id": 66, "test_setup_code": "", "test_list": ["assert pos_count([1,-2,3,-4]) == 2", "assert pos_count([3,4,5,-1]) == 3", "assert pos_count([1,2,3,4]) == 4"], "challenge_test_list": [], "method2_gpt4_output": "\ndef pos_count(lst):\n    return sum(1 for i in lst if i > 0)\n", "method2_gpt3_5_output": "\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to check whether the given array is monotonic or not.", "code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "task_id": 68, "test_setup_code": "", "test_list": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False"], "challenge_test_list": [], "method2_gpt4_output": "\ndef is_Monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n", "method2_gpt3_5_output": "\ndef is_Monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def is_Monotonic(A):\n    if len(A) <= 2:\n        return True\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i - 1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i - 1]:\n                return False\n    return True", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False", "task_id": 72, "test_setup_code": "", "test_list": ["assert dif_Square(5) == True", "assert dif_Square(10) == False", "assert dif_Square(15) == True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef dif_Square(n):\n    for x in range(n):\n        y2 = x * x - n\n        if y2 >= 0:\n            y = int(y2**0.5)\n            if y * y == y2:\n                return True\n    return False\n", "method2_gpt3_5_output": "\ndef dif_Square(n):\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if j**2 - i**2 == n:\n                return True\n    return False\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def dif_Square(n):\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            if i*i-j*j==n:\n                return True\n    return False", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to find number of integers with odd number of set bits.", "code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ", "task_id": 78, "test_setup_code": "", "test_list": ["assert count_With_Odd_SetBits(5) == 3", "assert count_With_Odd_SetBits(10) == 5", "assert count_With_Odd_SetBits(15) == 8"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_With_Odd_SetBits(n):\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    \n    odd_count = 0\n    for i in range(1, n + 1):\n        if count_set_bits(i) % 2 != 0:\n            odd_count += 1\n    \n    return odd_count\n", "method2_gpt3_5_output": "\ndef count_With_Odd_SetBits(n):\n    def countSetBits(num):\n        count = 0\n        while (num):\n            count += num & 1\n            num >>= 1\n        return count\n\n    result = 0\n    for i in range(n + 1):\n        if countSetBits(i) % 2 != 0:\n            result += 1\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2!= 0:\n            count += 1\n    return count", "complexity": 0, "data_split": "train"}
{"text": "Write a function to find the nth tetrahedral number.", "code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6", "task_id": 80, "test_setup_code": "", "test_list": ["assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0"], "challenge_test_list": [], "method2_gpt4_output": "\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n", "method2_gpt3_5_output": "\ndef tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def tetrahedral_number(n):\n    return int((n * (n + 1) * (n + 2)) / 6)", "complexity": 0, "data_split": "train"}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume", "task_id": 82, "test_setup_code": "", "test_list": ["assert volume_sphere(10)==4188.790204786391", "assert volume_sphere(25)==65449.84694978735", "assert volume_sphere(20)==33510.32163829113"], "challenge_test_list": [], "method2_gpt4_output": "\ndef volume_sphere(r):\n    from math import pi\n    return (4.0/3.0) * pi * r**3\n", "method2_gpt3_5_output": "\nimport math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def volume_sphere(r):\n    return (4/3)*math.pi*(r**3)", "complexity": 0, "data_split": "train"}
{"text": "Write a function to get the frequency of the elements in a list.", "code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count", "task_id": 88, "test_setup_code": "", "test_list": ["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ", "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ", "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "], "challenge_test_list": [], "method2_gpt4_output": "\ndef freq_count(list1):\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n", "method2_gpt3_5_output": "\ndef freq_count(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def freq_count(list1):\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to find the length of the longest word.", "code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max", "task_id": 90, "test_setup_code": "", "test_list": ["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "assert len_log([\"a\",\"ab\",\"abc\"]) == 3", "assert len_log([\"small\",\"big\",\"tall\"]) == 5"], "challenge_test_list": [], "method2_gpt4_output": "\ndef len_log(list1):\n    return len(max(list1, key=len))\n", "method2_gpt3_5_output": "\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def len_log(list1):\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)", "complexity": 0, "data_split": "train"}
{"text": "Write a function to calculate the value of 'a' to the power 'b'.", "code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)", "task_id": 93, "test_setup_code": "", "test_list": ["assert power(3,4) == 81", "assert power(2,3) == 8", "assert power(5,5) == 3125"], "challenge_test_list": [], "method2_gpt4_output": "\ndef power(a, b):\n    return a ** b\n", "method2_gpt3_5_output": "\ndef power(a, b):\n    return a ** b\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def power(a,b):\n    if b==0:\n        return 1\n    elif b%2==0:\n        return power(a,b//2)*power(a,b//2)\n    else:\n        return a*power(a,b//2)*power(a,b//2)", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to find the number of divisors of a given integer.", "code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x", "task_id": 96, "test_setup_code": "", "test_list": ["assert divisor(15) == 4 ", "assert divisor(12) == 6", "assert divisor(9) == 3"], "challenge_test_list": [], "method2_gpt4_output": "\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n", "method2_gpt3_5_output": "\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def divisor(n):\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count", "complexity": 0, "data_split": "train"}
{"text": "Write a function to convert snake case string to camel case string.", "code": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "task_id": 102, "test_setup_code": "", "test_list": ["assert snake_to_camel('python_program')=='PythonProgram'", "assert snake_to_camel('python_language')==('PythonLanguage')", "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"], "challenge_test_list": [], "method2_gpt4_output": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "method2_gpt3_5_output": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to count true booleans in the given list.", "code": "def count(lst):   \r\n    return sum(lst) ", "task_id": 105, "test_setup_code": "", "test_list": ["assert count([True,False,True]) == 2", "assert count([False,False]) == 0", "assert count([True,True,True]) == 3"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count(lst):\n    return sum(1 for element in lst if element is True)\n", "method2_gpt3_5_output": "\ndef count(lst):\n    return sum(1 for i in lst if i is True)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to find the count of rotations of a binary string with odd value.", "code": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ", "task_id": 109, "test_setup_code": "", "test_list": ["assert odd_Equivalent(\"011001\",6) == 3", "assert odd_Equivalent(\"11011\",5) == 4", "assert odd_Equivalent(\"1010\",4) == 2"], "challenge_test_list": [], "method2_gpt4_output": "\ndef odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 == 1:\n            count += 1\n        s = s[1:] + s[0]  # Rotate the string\n    return count\n", "method2_gpt3_5_output": "\ndef odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 == 1:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count", "complexity": 0, "data_split": "train"}
{"text": "Write a function to check if a string represents an integer or not.", "code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False", "task_id": 113, "test_setup_code": "", "test_list": ["assert check_integer(\"python\")==False", "assert check_integer(\"1\")==True", "assert check_integer(\"12345\")==True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n", "method2_gpt3_5_output": "\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "complexity": 0, "data_split": "train"}
{"text": "Write a function to convert a given tuple of positive integers into an integer.", "code": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result", "task_id": 116, "test_setup_code": "", "test_list": ["assert tuple_to_int((1,2,3))==123", "assert tuple_to_int((4,5,6))==456", "assert tuple_to_int((5,6,7))==567"], "challenge_test_list": [], "method2_gpt4_output": "\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))\n", "method2_gpt3_5_output": "\ndef tuple_to_int(nums):\n    result = int(''.join(map(str, nums)))\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def tuple_to_int(nums):\n    # Write your code here.\n    # nums = tuple(map(int, nums.split()))\n    # return int(''.join(map(str, nums)))\n    return int(''.join(map(str, nums)))", "complexity": 0, "data_split": "train"}
{"text": "Write a function to convert tuple to a string.", "code": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str", "task_id": 132, "test_setup_code": "", "test_list": ["assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "assert tup_string(('p','y','t','h','o','n'))==(\"python\")", "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"], "challenge_test_list": [], "method2_gpt4_output": "\ndef tup_string(tup1):\n    return ''.join(map(str, tup1))\n", "method2_gpt3_5_output": "\ndef tup_string(tup1):\n    return ''.join(tup1)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def tup_string(tup1):\n    string1 = \"\"\n    for i in tup1:\n        string1 += str(i)\n    return string1", "complexity": 0, "data_split": "train"}
{"text": "Write a function to find the nth hexagonal number.", "code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ", "task_id": 135, "test_setup_code": "", "test_list": ["assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91"], "challenge_test_list": [], "method2_gpt4_output": "\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n", "method2_gpt3_5_output": "\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def hexagonal_num(n):\n    return (n * (2 * n - 1))", "complexity": 0, "data_split": "train"}
{"text": "Write a function to find the vertex of a parabola.", "code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex", "task_id": 153, "test_setup_code": "", "test_list": ["assert parabola_vertex(5,3,2)==(-0.3, 1.55)", "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)", "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"], "challenge_test_list": [], "method2_gpt4_output": "\ndef parabola_vertex(a, b, c):\n    h = -b / (2 * a)\n    k = c - b**2 / (4 * a)\n    return (h, k)\n", "method2_gpt3_5_output": "\ndef parabola_vertex(a, b, c):\n    vertex_x = -b / (2 * a)\n    vertex_y = a * vertex_x ** 2 + b * vertex_x + c\n    return (vertex_x, vertex_y)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def parabola_vertex(a, b, c):\n    x = -b/(2*a)\n    y = c - a*x**2\n    return x, y", "complexity": 0, "data_split": "train"}
{"text": "Write a function to extract every specified element from a given two dimensional list.", "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result", "task_id": 154, "test_setup_code": "", "test_list": ["assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef specified_element(nums, N):\n    return [nums[i][N] for i in range(len(nums)) if N < len(nums[i])]\n", "method2_gpt3_5_output": "\ndef specified_element(nums, N):\n    result = []\n    for sublist in nums:\n        if len(sublist) > N:\n            result.append(sublist[N])\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def specified_element(nums, N):\n    return [nums[i][N] for i in range(len(nums))]", "complexity": 0, "data_split": "train"}
{"text": "Write a function to remove all elements from a given list present in another list.", "code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result", "task_id": 161, "test_setup_code": "", "test_list": ["assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef remove_elements(list1, list2):\n    return [elem for elem in list1 if elem not in list2]\n", "method2_gpt3_5_output": "\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def remove_elements(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1", "complexity": 0, "data_split": "train"}
{"text": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)", "task_id": 162, "test_setup_code": "", "test_list": ["assert sum_series(6)==12", "assert sum_series(10)==30", "assert sum_series(9)==25"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sum_series(n):\n    return sum(range(n, 0, -2))\n", "method2_gpt3_5_output": "\ndef sum_series(n):\n    total_sum = 0\n    while n > 0:\n        total_sum += n\n        n -= 2\n    return total_sum\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def sum_series(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to count the pairs with xor as an even number.", "code": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ", "task_id": 166, "test_setup_code": "", "test_list": ["assert find_even_Pair([5,4,7,2,1],5) == 4", "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9", "assert find_even_Pair([1,2,3],3) == 1"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_even_Pair(A, N):\n    even_count = 0\n    odd_count = 0\n\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    total_pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n\n    return total_pairs\n", "method2_gpt3_5_output": "\ndef find_even_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def find_even_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2==0:\n                count+=1\n    return count", "complexity": 0, "data_split": "train"}
{"text": "Write a python function to find the frequency of a number in a given array.", "code": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ", "task_id": 168, "test_setup_code": "", "test_list": ["assert frequency([1,2,3],4) == 0", "assert frequency([1,2,2,3,3,3,4],3) == 3", "assert frequency([0,1,2,3,1,2],1) == 2"], "challenge_test_list": [], "method2_gpt4_output": "\ndef frequency(a, x):\n    return a.count(x)\n", "method2_gpt3_5_output": "\ndef frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def frequency(a,x):\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count", "complexity": 0, "data_split": "train"}
{"text": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums", "task_id": 4, "test_setup_code": "", "test_list": ["assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"], "challenge_test_list": [], "method2_gpt4_output": "\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n", "method2_gpt3_5_output": "\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def heap_queue_largest(nums,n):\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    for i in range(n-1):\n        heapq.heappop(heap)\n    return heapq.heappop(heap)", "complexity": 1, "data_split": "train"}
{"text": "Write a python function to find the minimum number of rotations required to get the same string.", "code": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ", "task_id": 9, "test_setup_code": "", "test_list": ["assert find_Rotations(\"aaaa\") == 1", "assert find_Rotations(\"ab\") == 2", "assert find_Rotations(\"abc\") == 3"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_Rotations(str):\n    tmp_str = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp_str[i: i + n]\n        if str == substring:\n            return i\n    return n\n", "method2_gpt3_5_output": "\ndef find_Rotations(s):\n    n = len(s)\n    temp = s + s\n    for i in range(1, n+1):\n        substring = temp[i:i+n]\n        if substring == s:\n            return i\n    return n\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        if str[i] == str[0]:\n            return i\n    return n", "complexity": 1, "data_split": "train"}
{"text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result", "task_id": 12, "test_setup_code": "", "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sort_matrix(M):\n    return sorted(M, key=sum)\n", "method2_gpt3_5_output": "\ndef sort_matrix(M):\n    sorted_matrix = sorted(M, key=lambda row: sum(row))\n    return sorted_matrix\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def sort_matrix(M):\n    # Write your code here\n    return M", "complexity": 1, "data_split": "train"}
{"text": "Write a python function to find the volume of a triangular prism.", "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ", "task_id": 14, "test_setup_code": "", "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_Volume(l, b, h):\n    base_area = 0.5 * b * h\n    volume = base_area * l\n    return volume\n", "method2_gpt3_5_output": "\ndef find_Volume(l, b, h):\n    return 0.5 * l * b * h\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def find_Volume(l,b,h) :\n    return (l*b*h)/3", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find m number of multiples of n.", "code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)", "task_id": 21, "test_setup_code": "", "test_list": ["assert multiples_of_num(4,3)== [3,6,9,12]", "assert multiples_of_num(2,5)== [5,10]", "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef multiples_of_num(m, n):\n    return [i * n for i in range(1, m + 1)]\n", "method2_gpt3_5_output": "\ndef multiples_of_num(m, n):\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(n * i)\n    return multiples\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def multiples_of_num(m,n):\n    return m*n", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find the first duplicate element in a given array of integers.", "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate", "task_id": 22, "test_setup_code": "", "test_list": ["assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4", "assert find_first_duplicate([1, 2, 3, 4])==-1", "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n", "method2_gpt3_5_output": "\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def find_first_duplicate(nums):\n    # TODO: Write your code here\n    if len(nums) == 0:\n        return -1\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            continue\n        if nums[i] > len(nums):\n            continue\n        if nums[i] == i:\n            continue\n        if nums[i] == nums[nums[i]]:\n            return nums[i]\n        nums[nums[i]], nums[i] = nums[i], nums[nums[i]]\n    return -1", "complexity": 1, "data_split": "train"}
{"text": "Write a python function to find the maximum sum of elements of list in a list of lists.", "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ", "task_id": 23, "test_setup_code": "", "test_list": ["assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33", "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6", "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"], "challenge_test_list": ["assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"], "method2_gpt4_output": "\ndef maximum_Sum(list1):\n    return max(sum(sublist) for sublist in list1)\n", "method2_gpt3_5_output": "\ndef maximum_Sum(list1):\n    max_sum = 0\n    for sub_list in list1:\n        max_sum = max(max_sum, sum(sub_list))\n    return max_sum\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def maximum_Sum(list1):\n    max_sum = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > max_sum:\n                max_sum = list1[i][j]\n    return max_sum", "complexity": 1, "data_split": "train"}
{"text": "Write a python function to find the missing number in a sorted array.", "code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ", "task_id": 34, "test_setup_code": "", "test_list": ["assert find_missing([1,2,3,5],4) == 4", "assert find_missing([1,3,4,5],4) == 2", "assert find_missing([1,2,3,5,6,7],5) == 4"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_missing(ar, N):\n    start = 0\n    end = N - 1\n    mid = 0\n\n    while end - start >= 2:\n        mid = (start + end) // 2\n        mid_by_idx_diff = ar[mid] - mid\n        start_by_idx_diff = ar[start] - start\n\n        if mid_by_idx_diff != start_by_idx_diff:\n            end = mid\n        else:\n            start = mid\n            \n    return (ar[start] + ar[end]) // 2\n", "method2_gpt3_5_output": "\ndef find_missing(ar, N):\n    if len(ar) == 0:\n        return N\n    if ar[0] != 1:\n        return 1\n    for i in range(1, len(ar)):\n        if ar[i] - ar[i-1] != 1:\n            return ar[i-1] + 1\n    return ar[-1] + 1\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": null, "complexity": 1, "data_split": "train"}
{"text": "Write a function to sort a given mixed list of integers and strings.", "code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part", "task_id": 37, "test_setup_code": "", "test_list": ["assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sort_mixed_list(mixed_list):\n    int_list = sorted([i for i in mixed_list if isinstance(i, int)])\n    str_list = sorted([i for i in mixed_list if isinstance(i, str)])\n    return int_list + str_list\n", "method2_gpt3_5_output": "\ndef sort_mixed_list(mixed_list):\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    sorted_integers = sorted(integers)\n    sorted_strings = sorted(strings)\n    return sorted_integers + sorted_strings\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": null, "complexity": 1, "data_split": "train"}
{"text": "Write a function to find the division of first even and odd number of a given list.", "code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)", "task_id": 38, "test_setup_code": "", "test_list": ["assert div_even_odd([1,3,5,7,4,1,6,8])==4", "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert div_even_odd([1,5,7,9,10])==10"], "challenge_test_list": [], "method2_gpt4_output": "\ndef div_even_odd(list1):\n    even = None\n    odd = None\n    \n    for num in list1:\n        if even is None and num % 2 == 0:\n            even = num\n        elif odd is None and num % 2 != 0:\n            odd = num\n            \n        if even is not None and odd is not None:\n            return even / odd\n    \n    return None\n", "method2_gpt3_5_output": "\ndef div_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 != 0:\n            odd = num\n            break\n    if even is not None and odd is not None:\n        return even / odd\n    else:\n        return \"No even or odd number found\"\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def div_even_odd(list1):\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list, odd_list", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find frequency of the elements in a given list of lists using collections module.", "code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result", "task_id": 40, "test_setup_code": "", "test_list": ["assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})", "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})", "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom collections import Counter\n\ndef freq_element(nums):\n    flat_list = [item for sublist in nums for item in sublist]\n    return Counter(flat_list)\n", "method2_gpt3_5_output": "\ndef freq_element(nums):\n    from collections import Counter\n    flat_list = [item for sublist in nums for item in sublist]\n    return Counter(flat_list)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def freq_element(nums):\n    from collections import Counter\n    c = Counter(nums)\n    return c.most_common(1)", "complexity": 1, "data_split": "train"}
{"text": "Write a function to extract every first or specified element from a given two-dimensional list.", "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ", "task_id": 49, "test_setup_code": "", "test_list": ["assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef specified_element(nums, N=0):\n    return [item[N] for item in nums if len(item) > N]\n", "method2_gpt3_5_output": "\ndef specified_element(nums, N):\n    result = []\n    for sub_list in nums:\n        if N < len(sub_list):\n            result.append(sub_list[N])\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def specified_element(nums, N):\n    return [nums[i][N-1] for i in range(len(nums))]", "complexity": 1, "data_split": "train"}
{"text": "Write a function to sort the given array by using counting sort.", "code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list", "task_id": 54, "test_setup_code": "", "test_list": ["assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]", "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]", "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef counting_sort(my_list):\n    max_val = max(my_list)\n    min_val = min(my_list)\n    range_of_elements = max_val - min_val + 1\n    count = [0] * range_of_elements\n    output = [0] * len(my_list)\n\n    for i in range(len(my_list)):\n        count[my_list[i] - min_val] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for i in range(len(my_list) - 1, -1, -1):\n        output[count[my_list[i] - min_val] - 1] = my_list[i]\n        count[my_list[i] - min_val] -= 1\n\n    for i in range(len(my_list)):\n        my_list[i] = output[i]\n\n    return my_list\n", "method2_gpt3_5_output": "\ndef counting_sort(my_list):\n    max_num = max(my_list)\n    min_num = min(my_list)\n    count_list = [0] * (max_num - min_num + 1)\n    for num in my_list:\n        count_list[num - min_num] += 1\n    output = []\n    for i in range(len(count_list)):\n        while count_list[i] > 0:\n            output.append(i + min_num)\n            count_list[i] -= 1\n    return output\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": null, "complexity": 1, "data_split": "train"}
{"text": "Write a function to find the nth octagonal number.", "code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ", "task_id": 59, "test_setup_code": "", "test_list": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "challenge_test_list": [], "method2_gpt4_output": "\ndef is_octagonal(n):\n    return n * (3 * n - 2)\n", "method2_gpt3_5_output": "\ndef is_octagonal(n):\n    return n * (3 * n - 2)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def is_octagonal(n):\n    return (math.sqrt(8*n+1)-1)/2", "complexity": 1, "data_split": "train"}
{"text": "Write a python function to count number of substrings with the sum of digits equal to their length.", "code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count", "task_id": 61, "test_setup_code": "", "test_list": ["assert count_Substrings('112112',6) == 6", "assert count_Substrings('111',3) == 6", "assert count_Substrings('1101112',7) == 12"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_Substrings(s, n):\n    count = 0\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == (j - i + 1):\n                count += 1\n    return count\n", "method2_gpt3_5_output": "\ndef count_Substrings(s, n):\n    def isValidSubstr(substr):\n        return sum(int(digit) for digit in substr) == len(substr)\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if isValidSubstr(s[i:j]):\n                count += 1\n    return count\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": null, "complexity": 1, "data_split": "train"}
{"text": "Write a function to find the number of ways to partition a set of bell numbers.", "code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ", "task_id": 67, "test_setup_code": "", "test_list": ["assert bell_number(2)==2", "assert bell_number(10)==115975", "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"], "challenge_test_list": [], "method2_gpt4_output": "\ndef bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n-1][n-1]\n", "method2_gpt3_5_output": "\ndef bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def bell_number(n):\n    if n == 0:\n        return 1\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)", "complexity": 1, "data_split": "train"}
{"text": "Write a function to check whether a list contains the given sublist or not.", "code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set", "task_id": 69, "test_setup_code": "", "test_list": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False"], "challenge_test_list": [], "method2_gpt4_output": "\ndef is_sublist(l, s):\n    return any(s == l[i:i+len(s)] for i in range(len(l) - len(s) + 1))\n", "method2_gpt3_5_output": "\ndef is_sublist(l, s):\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def is_sublist(l, s):\n    if s == []:\n        return True\n    if l == []:\n        return False\n    return is_sublist(l[1:], s) or is_sublist(l[1:], s[1:])", "complexity": 1, "data_split": "train"}
{"text": "Write a function to check whether it follows the sequence given in the patterns array.", "code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True", "task_id": 74, "test_setup_code": "", "test_list": ["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "], "challenge_test_list": [], "method2_gpt4_output": "\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    pattern_to_color = {}\n    color_to_pattern = {}\n    for color, pattern in zip(colors, patterns):\n        if pattern not in pattern_to_color and color not in color_to_pattern:\n            pattern_to_color[pattern] = color\n            color_to_pattern[color] = pattern\n        elif pattern_to_color.get(pattern) != color or color_to_pattern.get(color) != pattern:\n            return False\n    return True\n", "method2_gpt3_5_output": "\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern and color_to_pattern[color] != pattern:\n            return False\n        if pattern in pattern_to_color and pattern_to_color[pattern] != color:\n            return False\n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    return True\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True", "complexity": 1, "data_split": "train"}
{"text": "Write a python function to check whether the length of the word is odd or not.", "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False", "task_id": 79, "test_setup_code": "", "test_list": ["assert word_len(\"Hadoop\") == False", "assert word_len(\"great\") == True", "assert word_len(\"structure\") == True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef word_len(s):\n    return len(s) % 2 != 0\n", "method2_gpt3_5_output": "\ndef word_len(s):\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def word_len(s):\n    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find the n-th number in newman conway sequence.", "code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "task_id": 84, "test_setup_code": "", "test_list": ["assert sequence(10) == 6", "assert sequence(2) == 1", "assert sequence(3) == 2"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sequence(n):\n    if n <= 0:\n        return \"Invalid input\"\n    \n    if n == 1 or n == 2:\n        return 1\n    \n    seq = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n    \n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\n    return seq[n]\n", "method2_gpt3_5_output": "\ndef sequence(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        result = [0] * (n + 1)\n        result[1] = 1\n        result[2] = 1\n        for i in range(3, n + 1):\n            result[i] = result[result[i - 1]] + result[i - result[i - 1]]\n        return result[n]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find the surface area of a sphere.", "code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea", "task_id": 85, "test_setup_code": "", "test_list": ["assert surfacearea_sphere(10)==1256.6370614359173", "assert surfacearea_sphere(15)==2827.4333882308138", "assert surfacearea_sphere(20)==5026.548245743669"], "challenge_test_list": [], "method2_gpt4_output": "\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r * r\n", "method2_gpt3_5_output": "\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def surfacearea_sphere(r):\n    return 4*np.pi*r**2", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find nth centered hexagonal number.", "code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1", "task_id": 86, "test_setup_code": "", "test_list": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217"], "challenge_test_list": [], "method2_gpt4_output": "\ndef centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n", "method2_gpt3_5_output": "\ndef centered_hexagonal_number(n):\n    if n == 1:\n        return 1\n    else:\n        return 3*n*n - 3*n + 1\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def centered_hexagonal_number(n):\n    return n*(2*n-1)", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find the closest smaller number than n.", "code": "def closest_num(N):\r\n  return (N - 1)", "task_id": 89, "test_setup_code": "", "test_list": ["assert closest_num(11) == 10", "assert closest_num(7) == 6", "assert closest_num(12) == 11"], "challenge_test_list": [], "method2_gpt4_output": "\ndef closest_num(N):\n    return N - 1\n", "method2_gpt3_5_output": "\ndef closest_num(N):\n    result = N - 1\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def closest_num(N):\n    for i in range(N-1,0,-1):\n        if N%i==0:\n            return i", "complexity": 1, "data_split": "train"}
{"text": "Write a function to check whether the given number is undulating or not.", "code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True", "task_id": 92, "test_setup_code": "", "test_list": ["assert is_undulating(\"1212121\") == True", "assert is_undulating(\"1991\") == False", "assert is_undulating(\"121\") == True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef is_undulating(n):\n    n_str = str(n)\n    \n    if len(n_str) < 3 or len(set(n_str)) != 2:\n        return False\n    \n    for i in range(2, len(n_str)):\n        if n_str[i] != n_str[i % 2]:\n            return False\n    \n    return True\n", "method2_gpt3_5_output": "\ndef is_undulating(n):\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    for i in range(2, len(num_str)):\n        if (num_str[i] == num_str[i-2]) and (num_str[i-1] != num_str[i]):\n            continue\n        elif (num_str[i] != num_str[i-2]) and (num_str[i-1] == num_str[i]):\n            continue\n        else:\n            return False\n    return True\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": null, "complexity": 1, "data_split": "train"}
{"text": "Write a python function to find the minimum length of sublist.", "code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ", "task_id": 95, "test_setup_code": "", "test_list": ["assert Find_Min_Length([[1],[1,2]]) == 1", "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"], "challenge_test_list": [], "method2_gpt4_output": "\ndef Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst if isinstance(sublist, list))\n\n# Example usage:\n# my_list = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\n# print(Find_Min_Length(my_list))  # Output: 1\n", "method2_gpt3_5_output": "\ndef Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def Find_Min_Length(lst):\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j - i + 1 < min_length:\n                min_length = j - i + 1\n    return min_length", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find frequency count of list of lists.", "code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n", "task_id": 97, "test_setup_code": "", "test_list": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "challenge_test_list": [], "method2_gpt4_output": "\ndef frequency_lists(list1):\n    flat_list = [item for sublist in list1 for item in sublist]\n    frequency = {}\n    for item in flat_list:\n        frequency[item] = frequency.get(item, 0) + 1\n    return frequency\n", "method2_gpt3_5_output": "\ndef frequency_lists(list1):\n    freq_count = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_count:\n                freq_count[item] += 1\n            else:\n                freq_count[item] = 1\n    return freq_count\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def frequency_lists(list1):\n    freq = {}\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq", "complexity": 1, "data_split": "train"}
{"text": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ", "task_id": 98, "test_setup_code": "", "test_list": ["assert multiply_num((8, 2, 3, -1, 7))==-67.2", "assert multiply_num((-10,-20,-30))==-2000.0", "assert multiply_num((19,15,18))==1710.0"], "challenge_test_list": [], "method2_gpt4_output": "\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n", "method2_gpt3_5_output": "\ndef multiply_num(numbers):\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product", "complexity": 1, "data_split": "train"}
{"text": "Write a function to convert the given decimal number to its binary equivalent.", "code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ", "task_id": 99, "test_setup_code": "", "test_list": ["assert decimal_to_binary(8) == '1000'", "assert decimal_to_binary(18) == '10010'", "assert decimal_to_binary(7) == '111' "], "challenge_test_list": [], "method2_gpt4_output": "\ndef decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n", "method2_gpt3_5_output": "\ndef decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def decimal_to_binary(n):\n    if n==0:\n        return 0\n    else:\n        return (n%2 + 10*decimal_to_binary(n//2))", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "code": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result", "task_id": 111, "test_setup_code": "", "test_list": ["assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]", "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]", "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef common_in_nested_lists(nested_list):\n    if not nested_list:\n        return []\n    \n    # Initialize a set with the first sublist\n    common_elements = set(nested_list[0])\n    \n    # Intersect with sets of the rest of the sublists\n    for sublist in nested_list[1:]:\n        common_elements &= set(sublist)\n    \n    return list(common_elements)\n", "method2_gpt3_5_output": "\ndef common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    result = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        result &= set(lst)\n    return list(result)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Finds common elements in a nested list\n    \"\"\"\n    # Create a set of all the elements in the nested list\n    all_elements = set([element for sublist in nestedlist for element in sublist])\n    # Create a list of the common elements\n    common_elements = []\n    for element in all_elements:\n        if all_elements.count(element) == len(nestedlist):\n            common_elements.append(element)\n    return common_elements", "complexity": 1, "data_split": "train"}
{"text": "Write a python function to find the element that appears only once in a sorted array.", "code": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)", "task_id": 119, "test_setup_code": "", "test_list": ["assert search([1,1,2,2,3],5) == 3", "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8", "assert search([1,2,2,3,3,4,4],7) == 1"], "challenge_test_list": [], "method2_gpt4_output": "\ndef search(arr, n):\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid % 2 == 0:\n            if mid + 1 < n and arr[mid] == arr[mid + 1]:\n                start = mid + 2\n            else:\n                end = mid - 1\n        else:\n            if mid - 1 >= 0 and arr[mid] == arr[mid - 1]:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return arr[start] if start < n else None\n", "method2_gpt3_5_output": "\ndef search(arr, n):\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[n - 1] != arr[n - 2]:\n        return arr[n - 1]\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        if (mid % 2 == 0 and arr[mid] == arr[mid + 1]) or (mid % 2 == 1 and arr[mid] == arr[mid - 1]):\n            low = mid + 1\n        else:\n            high = mid - 1\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def search(arr,n) :\n    l = 0\n    h = n-1\n    while l <= h :\n        mid = (l+h)//2\n        if arr[mid] == n :\n            return mid\n        elif arr[mid] < n :\n            l = mid+1\n        else :\n            h = mid-1\n    return -1", "complexity": 1, "data_split": "train"}
{"text": "Write a function to sum all amicable numbers from 1 to a specified number.", "code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)", "task_id": 123, "test_setup_code": "", "test_list": ["assert amicable_numbers_sum(999)==504", "assert amicable_numbers_sum(9999)==31626", "assert amicable_numbers_sum(99)==0"], "challenge_test_list": [], "method2_gpt4_output": "\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(num):\n        total = 0\n        for i in range(1, num):\n            if num % i == 0:\n                total += i\n        return total\n\n    amicable_sum = 0\n    for a in range(2, limit):\n        b = sum_of_divisors(a)\n        if a != b and sum_of_divisors(b) == a:\n            amicable_sum += a\n\n    return amicable_sum\n", "method2_gpt3_5_output": "\ndef amicable_numbers_sum(limit):\n    def divisor_sum(n):\n        divisors_sum = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if i == (n // i):\n                    divisors_sum += i\n                else:\n                    divisors_sum += (i + n // i)\n        return divisors_sum\n\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        if num == divisor_sum(divisor_sum(num)) and num != divisor_sum(num):\n            amicable_sum += num\n    return amicable_sum\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def amicable_numbers_sum(limit):\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers", "complexity": 1, "data_split": "train"}
{"text": "Write a function to multiply two integers without using the * operator in python.", "code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)", "task_id": 127, "test_setup_code": "", "test_list": ["assert multiply_int(10,20)==200", "assert multiply_int(5,10)==50", "assert multiply_int(4,8)==32"], "challenge_test_list": [], "method2_gpt4_output": "\ndef multiply_int(x, y):\n    result = 0\n    positive = (x >= 0 and y >= 0) or (x < 0 and y < 0)\n    x, y = abs(x), abs(y)\n    for _ in range(y):\n        result += x\n    return result if positive else -result\n", "method2_gpt3_5_output": "\ndef multiply_int(x, y):\n    result = 0\n    for i in range(abs(y)):\n        result += x\n    if y < 0:\n        result = -result\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": null, "complexity": 1, "data_split": "train"}
{"text": "Write a python function to reverse only the vowels of a given string.", "code": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string", "task_id": 131, "test_setup_code": "", "test_list": ["assert reverse_vowels(\"Python\") == \"Python\"", "assert reverse_vowels(\"USA\") == \"ASU\"", "assert reverse_vowels(\"ab\") == \"ab\""], "challenge_test_list": [], "method2_gpt4_output": "\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1_list[i] in vowels and str1_list[j] in vowels:\n            str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n            i += 1\n            j -= 1\n        elif str1_list[i] in vowels:\n            j -= 1\n        elif str1_list[j] in vowels:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n\n    return \"\".join(str1_list)\n", "method2_gpt3_5_output": "\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str_list[left] in vowels and str_list[right] in vowels:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n        elif str_list[left] in vowels:\n            right -= 1\n        elif str_list[right] in vowels:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    return \"\".join(str_list)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def reverse_vowels(str1):\n    vowels = 'aeiou'\n    vowels_list = []\n    for i in str1:\n        if i in vowels:\n            vowels_list.append(i)\n    vowels_list.reverse()\n    vowels_str = ''.join(vowels_list)\n    return str1.replace(vowels_str, '') + vowels_str", "complexity": 1, "data_split": "train"}
{"text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)", "task_id": 133, "test_setup_code": "", "test_list": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n", "method2_gpt3_5_output": "\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))", "complexity": 1, "data_split": "train"}
{"text": "Write a python function to find the maximum difference between any two elements in a given array.", "code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ", "task_id": 145, "test_setup_code": "", "test_list": ["assert max_Abs_Diff((2,1,5,3),4) == 4", "assert max_Abs_Diff((9,3,2,5,1),5) == 8", "assert max_Abs_Diff((3,2,1),3) == 2"], "challenge_test_list": [], "method2_gpt4_output": "\ndef max_Abs_Diff(arr,n):\n    # Base case: if the array has less than 2 elements,\n    # the maximum difference is 0\n    if n < 2:\n        return 0\n\n    # Initialize max and min elements\n    max_element = arr[0]\n    min_element = arr[0]\n\n    # Traverse through the array to find the maximum and minimum element\n    for i in range(n):\n        max_element = max(max_element, arr[i])\n        min_element = min(min_element, arr[i])\n\n    # The maximum absolute difference would be the difference\n    # between maximum and minimum elements\n    return max_element - min_element\n", "method2_gpt3_5_output": "\ndef max_Abs_Diff(arr,n):\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def max_Abs_Diff(arr,n):\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    for i in range(1,n-1):\n        if arr[i+1] - arr[i] > max_diff:\n            max_diff = arr[i+1] - arr[i]\n    return max_diff", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find the maximum total path sum in the given triangle.", "code": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]", "task_id": 147, "test_setup_code": "", "test_list": ["assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14", "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ", "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"], "challenge_test_list": [], "method2_gpt4_output": "\ndef max_path_sum(tri, m, n):\n    for i in range(m-1, -1, -1):\n        for j in range(i+1):\n            if tri[i+1][j] > tri[i+1][j+1]:\n                tri[i][j] += tri[i+1][j]\n            else:\n                tri[i][j] += tri[i+1][j+1]\n    return tri[0][0]\n", "method2_gpt3_5_output": "\ndef max_path_sum(tri, m, n):\n    for i in range(m - 1, -1, -1):\n        for j in range(i + 1):\n            if tri[i + 1][j] > tri[i + 1][j + 1]:\n                tri[i][j] += tri[i + 1][j]\n            else:\n                tri[i][j] += tri[i + 1][j + 1]\n    return tri[0][0]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def max_path_sum(tri, m, n):\n    for i in range(m - 2, -1, -1):\n        for j in range(i + 1):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]", "complexity": 1, "data_split": "train"}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "code": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result", "task_id": 149, "test_setup_code": "", "test_list": ["assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6", "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3", "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"], "challenge_test_list": [], "method2_gpt4_output": "\ndef longest_subseq_with_diff_one(arr, n):\n    dp = [1 for i in range(n)]\n\n    for i in range(n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n", "method2_gpt3_5_output": "\ndef longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if (arr[i] == arr[j] + 1 or arr[i] == arr[j] - 1) and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def longest_subseq_with_diff_one(arr, n):\n    # Create a table to store results of subproblems\n    table = [[0 for x in range(n)] for y in range(n)]", "complexity": 1, "data_split": "train"}
{"text": "Write a function to calculate the area of a regular polygon.", "code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area", "task_id": 163, "test_setup_code": "", "test_list": ["assert area_polygon(4,20)==400.00000000000006", "assert area_polygon(10,15)==1731.1969896610804", "assert area_polygon(9,7)==302.90938549487214"], "challenge_test_list": [], "method2_gpt4_output": "\ndef area_polygon(s, l):\n    import math\n    return (s * (l ** 2)) / (4 * math.tan(math.pi / s))\n", "method2_gpt3_5_output": "\nimport math\n\ndef area_polygon(s, l):\n    n = s\n    side_length = l\n    area = (n * side_length ** 2) / (4 * math.tan(math.pi / n))\n    return area\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def area_polygon(s,l):\n    return (s*l)/2", "complexity": 1, "data_split": "train"}
{"text": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "code": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ", "task_id": 165, "test_setup_code": "", "test_list": ["assert count_char_position(\"xbcefg\") == 2", "assert count_char_position(\"ABcED\") == 3", "assert count_char_position(\"AbgdeF\") == 5"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1):\n        if (i == ord(char.lower()) - ord('a')):\n            count += 1\n    return count\n", "method2_gpt3_5_output": "\ndef count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if (i == ord(str1[i]) - ord('a')) or (i == ord(str1[i]) - ord('A')):\n            count += 1\n    return count\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def count_char_position(str1):\n    count = [0] * 26\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count[ord(str1[i]) - ord('a')] += 1\n    return count", "complexity": 1, "data_split": "train"}
{"text": "Write a python function to find smallest power of 2 greater than or equal to n.", "code": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ", "task_id": 167, "test_setup_code": "", "test_list": ["assert next_Power_Of_2(0) == 1", "assert next_Power_Of_2(5) == 8", "assert next_Power_Of_2(17) == 32"], "challenge_test_list": [], "method2_gpt4_output": "\ndef next_Power_Of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n", "method2_gpt3_5_output": "\ndef next_Power_Of_2(n):\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def next_Power_Of_2(n):\n    if n == 0:\n        return 0\n    return 1 << (n - 1).bit_length()", "complexity": 1, "data_split": "train"}
