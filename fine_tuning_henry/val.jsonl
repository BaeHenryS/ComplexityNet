{"text": "Write a python function to find the surface area of the square pyramid.", "code": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ", "task_id": 581, "test_setup_code": "", "test_list": ["assert surface_Area(3,4) == 33", "assert surface_Area(4,5) == 56", "assert surface_Area(1,2) == 5"], "challenge_test_list": [], "method2_gpt4_output": "\ndef surface_Area(b, s):\n    base_area = b * b\n    side_area = 2 * b * s\n    return base_area + side_area\n", "method2_gpt3_5_output": "\ndef surface_Area(b, s):\n    base_area = b**2\n    side_area = (2*b*s)/2\n    surface_area = base_area + side_area\n    return surface_area\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def even_ele(test_tuple, even_fnc):\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_fnc(i)\n        else:\n            print(i)", "complexity": 2, "data_split": "val"}
{"text": "Write a python function to interchange first and last elements in a given list.", "code": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList ", "task_id": 625, "test_setup_code": "", "test_list": ["assert swap_List([1,2,3]) == [3,2,1]", "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]", "assert swap_List([4,5,6]) == [6,5,4]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n", "method2_gpt3_5_output": "\ndef swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def is_upper(string):\n    return string.upper() == string", "complexity": 2, "data_split": "val"}
{"text": "Write a function that matches a word containing 'z', not at the start or end of the word.", "code": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 643, "test_setup_code": "", "test_list": ["assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')", "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')", "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"], "challenge_test_list": [], "method2_gpt4_output": "\nimport re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz\\B'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\n# print(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\"))\n# print(text_match_wordz_middle(\"Python Exercises\"))\n", "method2_gpt3_5_output": "\nimport re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w+z\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def remove_similar_row(test_list):\n    #print(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i]==test_list[j]:\n                test_list.remove(test_list[i])\n                break\n    return test_list", "complexity": 2, "data_split": "val"}
{"text": "Write a function to sort a list in a dictionary.", "code": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict", "task_id": 662, "test_setup_code": "", "test_list": ["assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}", "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}", "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sorted_dict(dict1):\n    return {k: sorted(v) for k, v in dict1.items()}\n", "method2_gpt3_5_output": "\ndef sorted_dict(dict1):\n    sorted_dict = dict(sorted(dict1.items()))\n    return sorted_dict\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "val"}
{"text": "Write a function to multiply consecutive numbers of a given list.", "code": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "task_id": 690, "test_setup_code": "", "test_list": ["assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]", "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]", "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef mul_consecutive_nums(nums):\n    result = [nums[i] * nums[i + 1] for i in range(len(nums) - 1)]\n    return result\n", "method2_gpt3_5_output": "\ndef mul_consecutive_nums(nums):\n    result = 1\n    for num in nums:\n        result *= num\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "val"}
{"text": "Write a function to sort a list of lists by length and value.", "code": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1", "task_id": 705, "test_setup_code": "", "test_list": ["assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]", "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]", "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sort_sublists(list1):\n    return sorted(list1, key=lambda sublist: (len(sublist), sublist))\n", "method2_gpt3_5_output": "\ndef sort_sublists(list1):\n    list1.sort(key=lambda x: (len(x), x))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)", "complexity": 2, "data_split": "val"}
{"text": "Write a function to filter the height and width of students which are stored in a dictionary.", "code": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ", "task_id": 722, "test_setup_code": "", "test_list": ["assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"], "challenge_test_list": [], "method2_gpt4_output": "\ndef filter_data(students, h, w):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}\n", "method2_gpt3_5_output": "\ndef filter_data(students, h, w):\n    filtered_students = {name: (height, width) for name, (height, width) in students.items() if height > h and width > w}\n    return filtered_students\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": null, "complexity": 2, "data_split": "val"}
{"text": "Write a python function to toggle bits of the number except the first and the last bit.", "code": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ", "task_id": 735, "test_setup_code": "", "test_list": ["assert toggle_middle_bits(9) == 15", "assert toggle_middle_bits(10) == 12", "assert toggle_middle_bits(11) == 13"], "challenge_test_list": [], "method2_gpt4_output": "\ndef toggle_middle_bits(n):\n    # First we need to find the number of bits in the integer n\n    if n == 0:\n        return 0  # Edge case when the number is 0\n    \n    num_bits = n.bit_length()\n    \n    # To keep the first and the last bit unchanged, we need to create a mask that has ones in all the\n    # places except the first and the last bit positions.\n    if num_bits > 2:\n        mask = ((1 << (num_bits - 2)) - 1) << 1\n    else:\n        # If the number is too small, there are no middle bits to toggle.\n        return n\n    \n    # Toggle the middle bits using XOR operation with the mask.\n    result = n ^ mask\n    return result\n", "method2_gpt3_5_output": "\ndef toggle_middle_bits(n):\n    if n <= 2:\n        return n\n    else:\n        mask = (1 << n.bit_length()) - 3\n        return n ^ mask\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def sum_Of_Subarray_Prod(arr,n):\n    # code here\n    res = 0\n    for i in range(n):\n        for j in range(i,n):\n            res += arr[i]*arr[j]\n    return res", "complexity": 2, "data_split": "val"}
{"text": "Write a python function to find the index of smallest triangular number with n digits.", "code": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ", "task_id": 739, "test_setup_code": "", "test_list": ["assert find_Index(2) == 4", "assert find_Index(3) == 14", "assert find_Index(4) == 45"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_Index(n):\n    i = 1\n    while True:\n        tri_num = (i * (i + 1)) // 2\n        if len(str(tri_num)) == n:\n            return i\n        elif len(str(tri_num)) > n:\n            break\n        i += 1\n\n# Test the function\n# print(find_Index(2))  # Example usage\n", "method2_gpt3_5_output": "\ndef is_triangular(num):\n    x = (2 * num)**0.5\n    return x == int(x)\n\ndef find_Index(n):\n    index = 1\n    current_num = 1\n    while True:\n        if len(str(current_num)) >= n and is_triangular(current_num):\n            return index\n        index += 1\n        current_num += index\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def geometric_sum(n):\n    return (1/2)*(2**n-1)", "complexity": 2, "data_split": "val"}
{"text": "Write a function to find the longest common subsequence for the given three string sequence.", "code": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]", "task_id": 747, "test_setup_code": "", "test_list": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2", "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ", "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"], "challenge_test_list": [], "method2_gpt4_output": "\ndef lcs_of_three(X, Y, Z, m, n, o):\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    \n    return L[m][n][o]\n", "method2_gpt3_5_output": "\ndef lcs_of_three(X, Y, Z, m, n, o):\n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n \n    index = L[m][n][o]\n    lcs = [\"\"] * (index + 1)\n    lcs[index] = \"\"\n \n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs[index - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif L[i - 1][j][k] > L[i][j - 1][k] and L[i - 1][j][k] > L[i][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] > L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n \n    print(\"LCS of\", X, Y, Z, \"is\", \"\".join(lcs))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": false, "method2_llama_success": false, "method2_llama_output": "def sector_area(r,a):\n    return r*r*a", "complexity": 2, "data_split": "val"}
{"text": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "task_id": 170, "test_setup_code": "", "test_list": ["assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29", "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16", "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])\n", "method2_gpt3_5_output": "\ndef sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def sum_range_list(list1, m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum", "complexity": 0, "data_split": "val"}
{"text": "Write a function to find the perimeter of a pentagon.", "code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter", "task_id": 171, "test_setup_code": "", "test_list": ["assert perimeter_pentagon(5)==25", "assert perimeter_pentagon(10)==50", "assert perimeter_pentagon(15)==75"], "challenge_test_list": [], "method2_gpt4_output": "\ndef perimeter_pentagon(a):\n    return 5 * a\n", "method2_gpt3_5_output": "\ndef perimeter_pentagon(a):\n    return 5 * a\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def perimeter_pentagon(a):\n    return 5*a", "complexity": 0, "data_split": "val"}
{"text": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "code": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count", "task_id": 172, "test_setup_code": "", "test_list": ["assert count_occurance(\"letstdlenstdporstd\") == 3", "assert count_occurance(\"truststdsolensporsd\") == 1", "assert count_occurance(\"makestdsostdworthit\") == 2"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_occurance(s):\n    return s.count('std')\n\n# Example usage:\n# result = count_occurance(\"1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\")\n# print(result)\n", "method2_gpt3_5_output": "\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count", "complexity": 0, "data_split": "val"}
{"text": "Write a function to remove everything except alphanumeric characters from a string.", "code": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))", "task_id": 173, "test_setup_code": "", "test_list": ["assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')", "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')", "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"], "challenge_test_list": [], "method2_gpt4_output": "\ndef remove_splchar(text):\n    return ''.join(e for e in text if e.isalnum())\n", "method2_gpt3_5_output": "\ndef remove_splchar(text):\n    return ''.join(e for e in text if e.isalnum())\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def remove_splchar(text):\n    return re.sub(r'[^a-zA-Z0-9]', '', text)", "complexity": 0, "data_split": "val"}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "code": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result", "task_id": 174, "test_setup_code": "", "test_list": ["assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}", "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}", "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"], "challenge_test_list": [], "method2_gpt4_output": "\ndef group_keyvalue(l):\n    result = {}\n    for key, value in l:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n", "method2_gpt3_5_output": "\ndef group_keyvalue(l):\n    result = {}\n    for key, value in l:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d", "complexity": 0, "data_split": "val"}
{"text": "Write a function to find the perimeter of a triangle.", "code": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter", "task_id": 176, "test_setup_code": "", "test_list": ["assert perimeter_triangle(10,20,30)==60", "assert perimeter_triangle(3,4,5)==12", "assert perimeter_triangle(25,35,45)==105"], "challenge_test_list": [], "method2_gpt4_output": "\ndef perimeter_triangle(a, b, c):\n    return a + b + c\n", "method2_gpt3_5_output": "\ndef perimeter_triangle(a, b, c):\n    return a + b + c\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def perimeter_triangle(a,b,c):\n    return a+b+c", "complexity": 0, "data_split": "val"}
{"text": "Write a python function to find the first missing positive number.", "code": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)", "task_id": 189, "test_setup_code": "", "test_list": ["assert first_Missing_Positive([1,2,3,-1,5],5) == 4", "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2", "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"], "challenge_test_list": [], "method2_gpt4_output": "\ndef first_Missing_Positive(arr, n):\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    \n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1\n", "method2_gpt3_5_output": "\ndef first_Missing_Positive(arr, n):\n    i = 0\n    while i < n:\n        if arr[i] > 0 and arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]    \n        else:\n            i += 1\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def first_Missing_Positive(arr,n):\n    for i in range(n):\n        if arr[i]<=0 or arr[i]>n:\n            arr[i]=1\n    for i in range(n):\n        index=abs(arr[i])-1\n        if index<n and arr[index]>0:\n            arr[index]=-arr[index]\n    for i in range(n):\n        if arr[i]>0:\n            return i+1\n    return n+1", "complexity": 0, "data_split": "val"}
{"text": "Write a python function to check whether a string has atleast one letter and one number.", "code": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ", "task_id": 192, "test_setup_code": "", "test_list": ["assert check_String('thishasboth29') == True", "assert check_String('python') == False", "assert check_String ('string') == False"], "challenge_test_list": [], "method2_gpt4_output": "\ndef check_String(str):\n    has_number = any(char.isdigit() for char in str)\n    has_letter = any(char.isalpha() for char in str)\n    return has_number and has_letter\n", "method2_gpt3_5_output": "\ndef check_String(s):\n    return any(char.isalpha() for char in s) and any(char.isdigit() for char in s)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def check_String(str):\n    flag = False\n    for i in str:\n        if i.isdigit():\n            flag = True\n            break\n    if flag == False:\n        return False\n    flag = False\n    for i in str:\n        if i.isalpha():\n            flag = True\n            break\n    if flag == False:\n        return False\n    return True", "complexity": 0, "data_split": "val"}
{"text": "Write a python function to convert octal number to decimal number.", "code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ", "task_id": 194, "test_setup_code": "", "test_list": ["assert octal_To_Decimal(25) == 21", "assert octal_To_Decimal(30) == 24", "assert octal_To_Decimal(40) == 32"], "challenge_test_list": [], "method2_gpt4_output": "\ndef octal_To_Decimal(n):\n    decimal = 0\n    base = 1\n    while n:\n        last_digit = n % 10\n        n = n // 10\n        decimal += last_digit * base\n        base *= 8\n    return decimal\n", "method2_gpt3_5_output": "\ndef octal_To_Decimal(n):\n    return int(str(n), 8)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def octal_To_Decimal(n):\n    decimal_number = 0\n    base = 1\n    while(n!=0):\n        last_digit = n%10\n        decimal_number += last_digit * base\n        n = int(n/10)\n        base = base * 8\n    return decimal_number", "complexity": 0, "data_split": "val"}
{"text": "Write a python function to find the first position of an element in a sorted array.", "code": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res", "task_id": 195, "test_setup_code": "", "test_list": ["assert first([1,2,3,4,5,6,6],6,6) == 5", "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1", "assert first([1,2,3],1,3) == 0"], "challenge_test_list": [], "method2_gpt4_output": "\ndef first(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return result\n", "method2_gpt3_5_output": "\ndef first(arr, x, n):\n    left, right = 0, n-1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": true, "method2_llama_output": "def first(arr,x,n):\n    low=0\n    high=n-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==x:\n            if mid==0 or arr[mid-1]<x:\n                return mid\n            high=mid-1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n    return -1", "complexity": 0, "data_split": "val"}
{"text": "Write a function to find if the given number is a keith number or not.", "code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ", "task_id": 179, "test_setup_code": "", "test_list": ["assert is_num_keith(14) == True", "assert is_num_keith(12) == False", "assert is_num_keith(197) == True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef is_num_keith(x):\n    if x < 10:\n        return False\n    \n    # Create a list of digits of x\n    temp = x\n    digits = []\n    while temp > 0:\n        digits.append(temp % 10)\n        temp //= 10\n    digits.reverse()\n    \n    # Generate Keith sequence\n    seq = digits[:]\n    while seq[-1] < x:\n        next_term = sum(seq)\n        seq.append(next_term)\n        seq.pop(0)  # Remove the first element to move to next in sequence\n    \n    return seq[-1] == x\n", "method2_gpt3_5_output": "\ndef is_num_keith(x):\n    num_str = str(x)\n    n = len(num_str)\n    sequence = [int(digit) for digit in num_str]\n    \n    while sequence[-1] < x:\n        next_num = sum(sequence[-n:])\n        sequence.append(next_num)\n\n    if x in sequence:\n        return True\n    else:\n        return False\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def is_num_keith(x):\n    if x == 0:\n        return True\n    if x == 1:\n        return False\n    if x % 2 == 0:\n        return is_num_keith(x // 2)\n    if x % 2 == 1:\n        return is_num_keith(3 * x + 1)", "complexity": 1, "data_split": "val"}
{"text": "Write a function to check whether the given month name contains 30 days or not.", "code": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False", "task_id": 191, "test_setup_code": "", "test_list": ["assert check_monthnumber(\"February\")==False", "assert check_monthnumber(\"June\")==True", "assert check_monthnumber(\"April\")==True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef check_monthnumber(monthname3):\n    month_with_30_days = ['April', 'June', 'September', 'November']\n    return monthname3 in month_with_30_days\n", "method2_gpt3_5_output": "\ndef check_monthnumber(monthname3):\n    thirty_days_months = [\"april\", \"june\", \"september\", \"november\"]\n    if monthname3.lower() in thirty_days_months:\n        return True\n    else:\n        return False\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def check_monthnumber(monthname3):\n    if monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n        return 30\n    elif monthname3 == \"April\" or monthname3 == \"June\" or monthname3 == \"September\" or monthname3 == \"November\":\n        return 31\n    else:\n        return \"Invalid month name\"", "complexity": 1, "data_split": "val"}
{"text": "Write a function to remove all the tuples with length k.", "code": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ", "task_id": 196, "test_setup_code": "", "test_list": ["assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]", "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]", "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef remove_tuples(test_list, K):\n    return [tup for tup in test_list if len(tup) != K]\n", "method2_gpt3_5_output": "\ndef remove_tuples(test_list, K):\n    return [tup for tup in test_list if len(tup) != K]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def remove_tuples(test_list, K):\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            test_list.remove(test_list[i])\n    return test_list", "complexity": 1, "data_split": "val"}
{"text": "Write a python function to find highest power of 2 less than or equal to given number.", "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ", "task_id": 199, "test_setup_code": "", "test_list": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "challenge_test_list": [], "method2_gpt4_output": "\ndef highest_Power_of_2(n):\n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    return 1 << (power - 1)\n", "method2_gpt3_5_output": "\ndef highest_Power_of_2(n):\n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    return 2 ** (power - 1)\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    count = 0\n    while (n):\n        n = n >> 1\n        count += 1\n    return count", "complexity": 1, "data_split": "val"}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples.", "code": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "task_id": 206, "test_setup_code": "", "test_list": ["assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')", "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')", "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"], "challenge_test_list": [], "method2_gpt4_output": "\ndef concatenate_elements(test_tup):\n    return tuple(str(test_tup[i]) + str(test_tup[i + 1]) for i in range(len(test_tup) - 1))\n", "method2_gpt3_5_output": "\ndef concatenate_elements(test_tup):\n    return tuple(str(test_tup[i]) + str(test_tup[i+1]) for i in range(len(test_tup) - 1))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def concatenate_elements(test_tup):\n    # Write your code here\n    new_list = []\n    for i in range(len(test_tup)):\n        if i == 0:\n            new_list.append(test_tup[i])\n        else:\n            new_list.append(test_tup[i-1] + test_tup[i])\n    return tuple(new_list)", "complexity": 1, "data_split": "val"}
{"text": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.", "code": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]", "task_id": 207, "test_setup_code": "", "test_list": ["assert find_longest_repeating_subseq(\"AABEBCDD\") == 3", "assert find_longest_repeating_subseq(\"aabb\") == 2", "assert find_longest_repeating_subseq(\"aab\") == 1"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]         \n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    \n    return dp[n][n]\n", "method2_gpt3_5_output": "\ndef find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]", "complexity": 1, "data_split": "val"}
{"text": "Write a function to check the given decimal with a precision of 2 by using regex.", "code": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)", "task_id": 208, "test_setup_code": "", "test_list": ["assert is_decimal('123.11') == True", "assert is_decimal('0.21') == True", "assert is_decimal('123.1214') == False"], "challenge_test_list": [], "method2_gpt4_output": "\nimport re\n\ndef is_decimal(num):\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n", "method2_gpt3_5_output": "\nimport re\n\ndef is_decimal(num):\n    pattern = re.compile(\"^-?\\d+\\.\\d{2}$\")\n    if re.match(pattern, str(num)):\n        return True\n    else:\n        return False\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def is_decimal(num):\n    return re.match(\"^[0-9]+\\.[0-9]{2}$\", num)", "complexity": 1, "data_split": "val"}
{"text": "Write a function to perform the concatenation of two string tuples.", "code": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 213, "test_setup_code": "", "test_list": ["assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')", "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')", "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"], "challenge_test_list": [], "method2_gpt4_output": "\ndef concatenate_strings(test_tup1, test_tup2):\n    return tuple(a + b for a, b in zip(test_tup1, test_tup2))\n", "method2_gpt3_5_output": "\ndef concatenate_strings(test_tup1, test_tup2):\n    return tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2", "complexity": 1, "data_split": "val"}
{"text": "Write a function to get the n largest items from a dataset.", "code": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest", "task_id": 232, "test_setup_code": "", "test_list": ["assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]", "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]", "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"], "challenge_test_list": [], "method2_gpt4_output": "\ndef larg_nnum(list1, n):\n    return sorted(list1, reverse=True)[:n]\n", "method2_gpt3_5_output": "\ndef larg_nnum(list1, n):\n    return sorted(list1, reverse=True)[:n]\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": "def larg_nnum(list1,n):\n    list1.sort()\n    return list1[-n:]", "complexity": 1, "data_split": "val"}
{"text": "Write a python function to find the next perfect square greater than a given number.", "code": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ", "task_id": 244, "test_setup_code": "", "test_list": ["assert next_Perfect_Square(35) == 36", "assert next_Perfect_Square(6) == 9", "assert next_Perfect_Square(9) == 16"], "challenge_test_list": [], "method2_gpt4_output": "\ndef next_Perfect_Square(N):\n    root = int(N**0.5)\n    next_square = (root + 1)**2\n    return next_square if next_square > N else (root + 2)**2\n", "method2_gpt3_5_output": "\ndef next_Perfect_Square(N):\n    root = int(N ** 0.5) + 1\n    return root ** 2\n", "method2_gpt4_success": true, "method2_gpt3_5_success": true, "method2_llama_success": false, "method2_llama_output": null, "complexity": 1, "data_split": "val"}
