{"text": "Write a python function to convert complex numbers to polar coordinates.", "code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ", "task_id": 252, "test_setup_code": "", "test_list": ["assert convert(1) == (1.0, 0.0)", "assert convert(4) == (4.0,0.0)", "assert convert(5) == (5.0,0.0)"], "challenge_test_list": [], "method2_gpt4_output": "\nimport cmath\n\ndef convert(numbers):  # -> tuple[float, float]\n    return cmath.polar(numbers)\n", "method2_gpt3_5_output": "\nimport math\n\ndef convert(numbers):\n    return (abs(numbers), math.degrees(math.atan2(numbers.imag, numbers.real)))\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a python function to count integers from a given list.", "code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr", "task_id": 253, "test_setup_code": "", "test_list": ["assert count_integer([1,2,'abc',1.2]) == 2", "assert count_integer([1,2,3]) == 3", "assert count_integer([1,1.2,4,5.1]) == 2"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_integer(list1):  # -> int\n    return sum(isinstance(item, int) for item in list1)\n", "method2_gpt3_5_output": "\ndef count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function to insert an element before each element of a list.", "code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list", "task_id": 251, "test_setup_code": "", "test_list": ["assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ", "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ", "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "], "challenge_test_list": [], "method2_gpt4_output": "\ndef insert_element(lst, element):\n    return [val for item in lst for val in (element, item)]\n", "method2_gpt3_5_output": "\ndef insert_element(lst, element):\n    for i in range(len(lst) * 2 - 1, 0, -2):\n        lst.insert(i, element)\n    return lst\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 1}
{"text": "Write a python function to convert complex numbers to polar coordinates.", "code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ", "task_id": 252, "test_setup_code": "", "test_list": ["assert convert(1) == (1.0, 0.0)", "assert convert(4) == (4.0,0.0)", "assert convert(5) == (5.0,0.0)"], "challenge_test_list": [], "method2_gpt4_output": "\nimport cmath\n\ndef convert(numbers):    \n    num = cmath.polar(numbers)  \n    return num  #-> tuple\n", "method2_gpt3_5_output": "\nimport cmath\n\ndef convert(numbers):    \n    num = cmath.polar(numbers)\n    return (num)  #-> tuple\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r", "task_id": 255, "test_setup_code": "", "test_list": ["assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom itertools import product\nfrom typing import List, Tuple, Any\n\ndef combinations_colors(l: List[str], n: int) -> List[Tuple[Any, ...]]:\n    return list(product(l, repeat=n))\n", "method2_gpt3_5_output": "\nfrom typing import List, Tuple, Any\nfrom itertools import product\n\ndef combinations_colors(l: List[Any], n: int) -> List[Tuple[Any, ...]]:\n    return list(product(l, repeat=n))\n", "method2_gpt4_success": 0, "method2_gpt3_5_success": 0}
{"text": "Write a python function to count the number of prime numbers less than a given non-negative number.", "code": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr", "task_id": 256, "test_setup_code": "", "test_list": ["assert count_Primes_nums(5) == 2", "assert count_Primes_nums(10) == 4", "assert count_Primes_nums(100) == 25"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_Primes_nums(n): #-> int\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return sum(sieve)\n", "method2_gpt3_5_output": "\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0], primes[1] = False, False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            primes[i*i:n:i] = [False] * len(primes[i*i:n:i])\n    return sum(primes)\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function to swap two numbers.", "code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)", "task_id": 257, "test_setup_code": "", "test_list": ["assert swap_numbers(10,20)==(20,10)", "assert swap_numbers(15,17)==(17,15)", "assert swap_numbers(100,200)==(200,100)"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom typing import Tuple\n\ndef swap_numbers(a: int, b: int) -> Tuple[int, int]:\n    return b, a\n", "method2_gpt3_5_output": "\nfrom typing import Tuple\n\ndef swap_numbers(a: int, b: int) -> Tuple[int, int]:\n    a, b = b, a\n    return a, b\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function to find number of odd elements in the given list using lambda function.", "code": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd", "task_id": 258, "test_setup_code": "", "test_list": ["assert count_odd([1, 2, 3, 5, 7, 8, 10])==4", "assert count_odd([10,15,14,13,-18,12,-20])==2", "assert count_odd([1, 2, 4, 8, 9])==2"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom typing import List\n\ndef count_odd(array_nums: List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 == 1, array_nums)))\n", "method2_gpt3_5_output": "\nfrom typing import List\n\ndef count_odd(array_nums: List[int]) -> int:\n    odd_count = len(list(filter(lambda x: x % 2 != 0, array_nums)))\n    return odd_count\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function to maximize the given two tuples.", "code": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 259, "test_setup_code": "", "test_list": ["assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))", "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((max(test_tup1[i], test_tup2[i]), min(test_tup1[i], test_tup2[i])) for i in range(min(len(test_tup1), len(test_tup2))))\n", "method2_gpt3_5_output": "\nfrom typing import Tuple\n\ndef maximize_elements(test_tup1, test_tup2) -> Tuple[Tuple[int, int], ...]:\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((max(test_tup1[i], test_tup2[i]),))\n    return tuple(result)\n", "method2_gpt4_success": 0, "method2_gpt3_5_success": 0}
{"text": "Write a function to find the nth newman–shanks–williams prime number.", "code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "task_id": 260, "test_setup_code": "", "test_list": ["assert newman_prime(3) == 7 ", "assert newman_prime(4) == 17", "assert newman_prime(5) == 41"], "challenge_test_list": [], "method2_gpt4_output": "\ndef newman_prime(n):    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def NSW_number(index):\n        s0, s1 = 1, 1\n        for _ in range(index):\n            sn = 2 * s1 + s0\n            s0, s1 = s1, sn\n        return s0\n\n    count = 0\n    i = 0\n    while True:\n        NSW = NSW_number(i)\n        if is_prime(NSW):\n            count += 1\n            if count == n:\n                return NSW\n        i += 1\n\n# Example usage:\n# nth_prime = newman_prime(5)\n# print(nth_prime)\n", "method2_gpt3_5_output": "\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef next_nsw_number(n):\n    if n == 0:\n        return 1\n    return next_nsw_number(n-1) + next_nsw_number(n-1) - 1\n\ndef newman_prime(n):\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_prime(next_nsw_number(num)):\n            count += 1\n    return next_nsw_number(num)\n", "method2_gpt4_success": 0, "method2_gpt3_5_success": 0}
{"text": "Write a function to perform mathematical division operation across the given tuples.", "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 261, "test_setup_code": "", "test_list": ["assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)", "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"], "challenge_test_list": [], "method2_gpt4_output": "\ndef division_elements(test_tup1, test_tup2) -> tuple:\n    return tuple(x / y if y != 0 else 'Division by zero' for x, y in zip(test_tup1, test_tup2))\n", "method2_gpt3_5_output": "\ndef division_elements(test_tup1, test_tup2) -> tuple:\n    result = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    return result\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]", "task_id": 262, "test_setup_code": "", "test_list": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "challenge_test_list": [], "method2_gpt4_output": "\ndef split_two_parts(list1, L):\n    return (list1[:L], list1[L:])\n", "method2_gpt3_5_output": "\ndef split_two_parts(list1, L):\n    return (list1[:L], list1[L:])\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function to merge two dictionaries.", "code": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d", "task_id": 263, "test_setup_code": "", "test_list": ["assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}", "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}", "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"], "challenge_test_list": [], "method2_gpt4_output": "\ndef merge_dict(d1: dict, d2: dict) -> dict:\n    d = {**d1, **d2}\n    return d\n", "method2_gpt3_5_output": "\ndef merge_dict(d1: dict, d2: dict) -> dict:\n    d = d1.copy()\n    d.update(d2)\n    return d\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function to calculate a dog's age in dog's years.", "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age", "task_id": 264, "test_setup_code": "", "test_list": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109"], "challenge_test_list": [], "method2_gpt4_output": "\ndef dog_age(h_age: int) -> float:\n    if h_age <= 0:\n        return 0.0\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n", "method2_gpt3_5_output": "\ndef dog_age(h_age: int) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n", "method2_gpt4_success": 4, "method2_gpt3_5_success": 5}
{"text": "Write a function to split a list for every nth element.", "code": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]", "task_id": 265, "test_setup_code": "", "test_list": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ", "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ", "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "], "challenge_test_list": [], "method2_gpt4_output": "\nfrom typing import Any, List\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i:i + step] for i in range(0, len(S), step)]\n", "method2_gpt3_5_output": "\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i:i+step] for i in range(0, len(S), step)]\n", "method2_gpt4_success": 0, "method2_gpt3_5_success": 0}
{"text": "Write a function to find the lateral surface area of a cube.", "code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA", "task_id": 266, "test_setup_code": "", "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400"], "challenge_test_list": [], "method2_gpt4_output": "\ndef lateralsurface_cube(l: int) -> int:\n    return 4 * l * l\n", "method2_gpt3_5_output": "\ndef lateralsurface_cube(l: int) -> int:\n    return 4 * (l ** 2)\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a python function to find the sum of squares of first n odd natural numbers.", "code": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ", "task_id": 267, "test_setup_code": "", "test_list": ["assert square_Sum(2) == 10", "assert square_Sum(3) == 35", "assert square_Sum(4) == 84"], "challenge_test_list": [], "method2_gpt4_output": "\ndef square_Sum(n): #-> int\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n", "method2_gpt3_5_output": "\ndef square_Sum(n):\n    return n ** 3\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 1}
{"text": "Write a function to find the n'th star number.", "code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ", "task_id": 268, "test_setup_code": "", "test_list": ["assert find_star_num(3) == 37", "assert find_star_num(4) == 73", "assert find_star_num(5) == 121"], "challenge_test_list": [], "method2_gpt4_output": "\ndef find_star_num(n): # -> int\n    if n == 1:\n        return 1\n    else:\n        return 6 * (n - 1) + find_star_num(n - 1)\n", "method2_gpt3_5_output": "\ndef find_star_num(n):\n    return 6 * n * (n - 1) + 1\n", "method2_gpt4_success": 0, "method2_gpt3_5_success": 4}
{"text": "Write a function to find the ascii value of a character.", "code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)", "task_id": 269, "test_setup_code": "", "test_list": ["assert ascii_value('A')==65", "assert ascii_value('R')==82", "assert ascii_value('S')==83"], "challenge_test_list": [], "method2_gpt4_output": "\ndef ascii_value(k) -> int:\n    return ord(k)\n", "method2_gpt3_5_output": "\ndef ascii_value(k) -> int:\n    return ord(k)\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a python function to find the sum of even numbers at even positions.", "code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum", "task_id": 270, "test_setup_code": "", "test_list": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30", "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26", "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int], n: int) -> int:\n    sum_even = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n", "method2_gpt3_5_output": "\ndef sum_even_and_even_index(arr: List[int], n: int) -> int:\n    return sum(arr[i] for i in range(1, n, 2) if arr[i] % 2 == 0)\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 0}
{"text": "Write a python function to find the sum of fifth power of first n even natural numbers.", "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ", "task_id": 271, "test_setup_code": "", "test_list": ["assert even_Power_Sum(2) == 1056", "assert even_Power_Sum(3) == 8832", "assert even_Power_Sum(1) == 32"], "challenge_test_list": [], "method2_gpt4_output": "\ndef even_Power_Sum(n): #-> int\n    return sum((2*i)**5 for i in range(1, n+1))\n", "method2_gpt3_5_output": "\ndef even_Power_Sum(n):\n    return sum([i**5 for i in range(2, 2*n+1, 2)])\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 1}
{"text": "Write a function to perfom the rear element extraction from list of tuples records.", "code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ", "task_id": 272, "test_setup_code": "", "test_list": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]", "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom typing import List, Any\n\ndef rear_extract(test_list) -> List[Any]:\n    return [tup[-1] for tup in test_list]\n", "method2_gpt3_5_output": "\nfrom typing import List, Any\n\ndef rear_extract(test_list: List[tuple]) -> List[Any]:\n    result = [t[-1] for t in test_list]\n    return result\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ", "task_id": 273, "test_setup_code": "", "test_list": ["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)", "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"], "challenge_test_list": [], "method2_gpt4_output": "\ndef substract_elements(test_tup1, test_tup2) -> tuple:\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n", "method2_gpt3_5_output": "\ndef substract_elements(test_tup1, test_tup2) -> tuple:\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n", "method2_gpt4_success": 4, "method2_gpt3_5_success": 5}
{"text": "Write a python function to find sum of even index binomial coefficients.", "code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ", "task_id": 274, "test_setup_code": "", "test_list": ["assert even_binomial_Coeff_Sum(4) == 8", "assert even_binomial_Coeff_Sum(6) == 32", "assert even_binomial_Coeff_Sum(2) == 2"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    sum_even_index_coeffs = sum(comb(n, i) for i in range(0, n+1, 2))\n    return sum_even_index_coeffs\n", "method2_gpt3_5_output": "\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    def binomial_coeff(n, k):\n        if k == 0 or k == n:\n            return 1\n        if k > n - k:\n            k = n - k\n        result = 1\n        for i in range(k):\n            result = result * (n - i)\n            result = result // (i + 1)\n        return result\n    \n    return sum(binomial_coeff(n, i) for i in range(0, n + 1, 2))\n", "method2_gpt4_success": 0, "method2_gpt3_5_success": 4}
{"text": "Write a python function to find the position of the last removed element from the given array.", "code": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1", "task_id": 275, "test_setup_code": "", "test_list": ["assert get_Position([2,5,4],3,2) == 2", "assert get_Position([4,3],2,2) == 2", "assert get_Position([1,2,3,4],4,1) == 4"], "challenge_test_list": [], "method2_gpt4_output": "\ndef get_Position(a, n, m) -> int:\n    if m <= n:\n        return m\n    return get_Position(a, n, m - n)\n", "method2_gpt3_5_output": "\ndef get_Position(a, n, m) -> int:\n    removed_index = a.index(m)\n    return removed_index\n", "method2_gpt4_success": 0, "method2_gpt3_5_success": 0}
{"text": "Write a function to find the volume of a cylinder.", "code": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume", "task_id": 276, "test_setup_code": "", "test_list": ["assert volume_cylinder(10,5)==1570.7500000000002", "assert volume_cylinder(4,5)==251.32000000000002", "assert volume_cylinder(4,10)==502.64000000000004"], "challenge_test_list": [], "method2_gpt4_output": "\ndef volume_cylinder(r: float, h: float) -> float:\n    from math import pi\n    return pi * r**2 * h\n", "method2_gpt3_5_output": "\ndef volume_cylinder(r: float, h: float) -> float:\n    pi = 3.14159\n    volume = pi * r ** 2 * h\n    return volume\n", "method2_gpt4_success": 0, "method2_gpt3_5_success": 0}
{"text": "Write a function to filter a dictionary based on values.", "code": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result", "task_id": 277, "test_setup_code": "", "test_list": ["assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom typing import Dict\n\ndef dict_filter(dict: Dict[str, int], n: int) -> Dict[str, int]:\n    return {k: v for k, v in dict.items() if v > n}\n", "method2_gpt3_5_output": "\nfrom typing import Dict\n\ndef dict_filter(d: Dict[str, int], n: int) -> Dict[str, int]:\n    return {key: value for key, value in d.items() if value > n}\n", "method2_gpt4_success": 2, "method2_gpt3_5_success": 0}
{"text": "Write a function to find the element count that occurs before the record in the given tuple.", "code": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ", "task_id": 278, "test_setup_code": "", "test_list": ["assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "assert count_first_elements((2, 9, (5, 7), 11) ) == 2", "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"], "challenge_test_list": [], "method2_gpt4_output": "\ndef count_first_elements(test_tup):  # -> int\n    first_element = test_tup[0]\n    element_count = 0\n\n    for element in test_tup:\n        if element != first_element:\n            break\n        element_count += 1\n    \n    return element_count\n", "method2_gpt3_5_output": "\ndef count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            return count\n        count += 1\n    return count\n", "method2_gpt4_success": 0, "method2_gpt3_5_success": 0}
{"text": "Write a function to find the nth decagonal number.", "code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ", "task_id": 279, "test_setup_code": "", "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370"], "challenge_test_list": [], "method2_gpt4_output": "\ndef is_num_decagonal(n: int) -> int:\n    return 4 * n * (n - 1) + 1\n", "method2_gpt3_5_output": "\ndef is_num_decagonal(n: int) -> int:\n    return 5*n*(n-1) + 1\n", "method2_gpt4_success": 1, "method2_gpt3_5_success": 0}
{"text": "Write a function to search an element in the given array by using sequential search.", "code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos", "task_id": 280, "test_setup_code": "", "test_list": ["assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)", "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"], "challenge_test_list": [], "method2_gpt4_output": "\ndef sequential_search(dlist: list, item: any) -> tuple:\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n", "method2_gpt3_5_output": "\ndef sequential_search(dlist: list, item: any) -> tuple:\n    pos = 0\n    found = False\n    \n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    \n    return (found, pos)\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a python function to check if the elements of a given list are unique or not.", "code": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True", "task_id": 281, "test_setup_code": "", "test_list": ["assert all_unique([1,2,3]) == True", "assert all_unique([1,2,1,2]) == False", "assert all_unique([1,2,3,4,5]) == True"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom typing import List\n\ndef all_unique(test_list: List) -> bool:\n    return len(test_list) == len(set(test_list))\n", "method2_gpt3_5_output": "\ndef all_unique(test_list: List) -> bool:\n    return len(test_list) == len(set(test_list))\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 0}
{"text": "Write a function to substaract two lists using map and lambda function.", "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)", "task_id": 282, "test_setup_code": "", "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]"], "challenge_test_list": [], "method2_gpt4_output": "\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x - y, nums1, nums2))\n", "method2_gpt3_5_output": "\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x - y, nums1, nums2))\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True", "task_id": 283, "test_setup_code": "", "test_list": ["assert validate(1234) == True", "assert validate(51241) == False", "assert validate(321) == True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef validate(n: int) -> bool:\n    str_n = str(n)\n    for digit_str in set(str_n):\n        digit = int(digit_str)\n        if str_n.count(digit_str) > digit:\n            return False\n    return True\n", "method2_gpt3_5_output": "\ndef validate(n: int) -> bool:\n    num_str = str(n)\n    for digit in num_str:\n        count = num_str.count(digit)\n        if count > int(digit):\n            return False\n    return True\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function to check whether all items of a list are equal to a given string.", "code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element", "task_id": 284, "test_setup_code": "", "test_list": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"], "challenge_test_list": [], "method2_gpt4_output": "\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n", "method2_gpt3_5_output": "\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 5}
{"text": "Write a function that matches a string that has an a followed by two to three 'b'.", "code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 285, "test_setup_code": "", "test_list": ["assert text_match_two_three(\"ac\")==('Not matched!')", "assert text_match_two_three(\"dc\")==('Not matched!')", "assert text_match_two_three(\"abbbba\")==('Found a match!')"], "challenge_test_list": [], "method2_gpt4_output": "\nimport re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "method2_gpt3_5_output": "\nimport re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}', text):\n        return True\n    else:\n        return False\n", "method2_gpt4_success": 5, "method2_gpt3_5_success": 0}
